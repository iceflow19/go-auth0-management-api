// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	strfmt "github.com/go-openapi/strfmt"
	"golang.org/x/net/context"
)

// NewDeleteGrantsByIDParams creates a new DeleteGrantsByIDParams object
// with the default values initialized.
func NewDeleteGrantsByIDParams() *DeleteGrantsByIDParams {
	var ()
	return &DeleteGrantsByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteGrantsByIDParamsWithTimeout creates a new DeleteGrantsByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteGrantsByIDParamsWithTimeout(timeout time.Duration) *DeleteGrantsByIDParams {
	var ()
	return &DeleteGrantsByIDParams{

		timeout: timeout,
	}
}

// NewDeleteGrantsByIDParamsWithContext creates a new DeleteGrantsByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteGrantsByIDParamsWithContext(ctx context.Context) *DeleteGrantsByIDParams {
	var ()
	return &DeleteGrantsByIDParams{

		Context: ctx,
	}
}

// NewDeleteGrantsByIDParamsWithHTTPClient creates a new DeleteGrantsByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteGrantsByIDParamsWithHTTPClient(client *http.Client) *DeleteGrantsByIDParams {
	var ()
	return &DeleteGrantsByIDParams{
		HTTPClient: client,
	}
}

/*DeleteGrantsByIDParams contains all the parameters to send to the API endpoint
for the delete grants by id operation typically these are written to a http.Request
*/
type DeleteGrantsByIDParams struct {

	/*ID
	  The id of the grant to delete

	*/
	ID string
	/*UserID
	  The user_id of the grants to delete

	*/
	UserID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete grants by id params
func (o *DeleteGrantsByIDParams) WithTimeout(timeout time.Duration) *DeleteGrantsByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete grants by id params
func (o *DeleteGrantsByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete grants by id params
func (o *DeleteGrantsByIDParams) WithContext(ctx context.Context) *DeleteGrantsByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete grants by id params
func (o *DeleteGrantsByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete grants by id params
func (o *DeleteGrantsByIDParams) WithHTTPClient(client *http.Client) *DeleteGrantsByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete grants by id params
func (o *DeleteGrantsByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the delete grants by id params
func (o *DeleteGrantsByIDParams) WithID(id string) *DeleteGrantsByIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the delete grants by id params
func (o *DeleteGrantsByIDParams) SetID(id string) {
	o.ID = id
}

// WithUserID adds the userID to the delete grants by id params
func (o *DeleteGrantsByIDParams) WithUserID(userID *string) *DeleteGrantsByIDParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the delete grants by id params
func (o *DeleteGrantsByIDParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteGrantsByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.UserID != nil {

		// query param user_id
		var qrUserID string
		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {
			if err := r.SetQueryParam("user_id", qUserID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
