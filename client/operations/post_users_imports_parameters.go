// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"golang.org/x/net/context"
)

// NewPostUsersImportsParams creates a new PostUsersImportsParams object
// with the default values initialized.
func NewPostUsersImportsParams() *PostUsersImportsParams {
	var ()
	return &PostUsersImportsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostUsersImportsParamsWithTimeout creates a new PostUsersImportsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostUsersImportsParamsWithTimeout(timeout time.Duration) *PostUsersImportsParams {
	var ()
	return &PostUsersImportsParams{

		timeout: timeout,
	}
}

// NewPostUsersImportsParamsWithContext creates a new PostUsersImportsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostUsersImportsParamsWithContext(ctx context.Context) *PostUsersImportsParams {
	var ()
	return &PostUsersImportsParams{

		Context: ctx,
	}
}

// NewPostUsersImportsParamsWithHTTPClient creates a new PostUsersImportsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostUsersImportsParamsWithHTTPClient(client *http.Client) *PostUsersImportsParams {
	var ()
	return &PostUsersImportsParams{
		HTTPClient: client,
	}
}

/*PostUsersImportsParams contains all the parameters to send to the API endpoint
for the post users imports operation typically these are written to a http.Request
*/
type PostUsersImportsParams struct {

	/*ConnectionID
	  The connection id of the connection to which users will be inserted

	*/
	ConnectionID string
	/*ExternalID
	  Customer defined id

	*/
	ExternalID *string
	/*SendCompletionEmail
	  if true, send the completion email to all tenant owners when the job is finished

	*/
	SendCompletionEmail *bool
	/*Upsert
	  Update the user if already exists

	*/
	Upsert *bool
	/*Users
	  A file containing the users to import

	*/
	Users runtime.NamedReadCloser

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post users imports params
func (o *PostUsersImportsParams) WithTimeout(timeout time.Duration) *PostUsersImportsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post users imports params
func (o *PostUsersImportsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post users imports params
func (o *PostUsersImportsParams) WithContext(ctx context.Context) *PostUsersImportsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post users imports params
func (o *PostUsersImportsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post users imports params
func (o *PostUsersImportsParams) WithHTTPClient(client *http.Client) *PostUsersImportsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post users imports params
func (o *PostUsersImportsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConnectionID adds the connectionID to the post users imports params
func (o *PostUsersImportsParams) WithConnectionID(connectionID string) *PostUsersImportsParams {
	o.SetConnectionID(connectionID)
	return o
}

// SetConnectionID adds the connectionId to the post users imports params
func (o *PostUsersImportsParams) SetConnectionID(connectionID string) {
	o.ConnectionID = connectionID
}

// WithExternalID adds the externalID to the post users imports params
func (o *PostUsersImportsParams) WithExternalID(externalID *string) *PostUsersImportsParams {
	o.SetExternalID(externalID)
	return o
}

// SetExternalID adds the externalId to the post users imports params
func (o *PostUsersImportsParams) SetExternalID(externalID *string) {
	o.ExternalID = externalID
}

// WithSendCompletionEmail adds the sendCompletionEmail to the post users imports params
func (o *PostUsersImportsParams) WithSendCompletionEmail(sendCompletionEmail *bool) *PostUsersImportsParams {
	o.SetSendCompletionEmail(sendCompletionEmail)
	return o
}

// SetSendCompletionEmail adds the sendCompletionEmail to the post users imports params
func (o *PostUsersImportsParams) SetSendCompletionEmail(sendCompletionEmail *bool) {
	o.SendCompletionEmail = sendCompletionEmail
}

// WithUpsert adds the upsert to the post users imports params
func (o *PostUsersImportsParams) WithUpsert(upsert *bool) *PostUsersImportsParams {
	o.SetUpsert(upsert)
	return o
}

// SetUpsert adds the upsert to the post users imports params
func (o *PostUsersImportsParams) SetUpsert(upsert *bool) {
	o.Upsert = upsert
}

// WithUsers adds the users to the post users imports params
func (o *PostUsersImportsParams) WithUsers(users runtime.NamedReadCloser) *PostUsersImportsParams {
	o.SetUsers(users)
	return o
}

// SetUsers adds the users to the post users imports params
func (o *PostUsersImportsParams) SetUsers(users runtime.NamedReadCloser) {
	o.Users = users
}

// WriteToRequest writes these params to a swagger request
func (o *PostUsersImportsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param connection_id
	frConnectionID := o.ConnectionID
	fConnectionID := frConnectionID
	if fConnectionID != "" {
		if err := r.SetFormParam("connection_id", fConnectionID); err != nil {
			return err
		}
	}

	if o.ExternalID != nil {

		// form param external_id
		var frExternalID string
		if o.ExternalID != nil {
			frExternalID = *o.ExternalID
		}
		fExternalID := frExternalID
		if fExternalID != "" {
			if err := r.SetFormParam("external_id", fExternalID); err != nil {
				return err
			}
		}

	}

	if o.SendCompletionEmail != nil {

		// form param send_completion_email
		var frSendCompletionEmail bool
		if o.SendCompletionEmail != nil {
			frSendCompletionEmail = *o.SendCompletionEmail
		}
		fSendCompletionEmail := swag.FormatBool(frSendCompletionEmail)
		if fSendCompletionEmail != "" {
			if err := r.SetFormParam("send_completion_email", fSendCompletionEmail); err != nil {
				return err
			}
		}

	}

	if o.Upsert != nil {

		// form param upsert
		var frUpsert bool
		if o.Upsert != nil {
			frUpsert = *o.Upsert
		}
		fUpsert := swag.FormatBool(frUpsert)
		if fUpsert != "" {
			if err := r.SetFormParam("upsert", fUpsert); err != nil {
				return err
			}
		}

	}

	// form file param users
	if err := r.SetFileParam("users", o.Users); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
