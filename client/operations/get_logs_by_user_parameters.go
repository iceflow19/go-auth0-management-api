// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"golang.org/x/net/context"
)

// NewGetLogsByUserParams creates a new GetLogsByUserParams object
// with the default values initialized.
func NewGetLogsByUserParams() *GetLogsByUserParams {
	var ()
	return &GetLogsByUserParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLogsByUserParamsWithTimeout creates a new GetLogsByUserParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLogsByUserParamsWithTimeout(timeout time.Duration) *GetLogsByUserParams {
	var ()
	return &GetLogsByUserParams{

		timeout: timeout,
	}
}

// NewGetLogsByUserParamsWithContext creates a new GetLogsByUserParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLogsByUserParamsWithContext(ctx context.Context) *GetLogsByUserParams {
	var ()
	return &GetLogsByUserParams{

		Context: ctx,
	}
}

// NewGetLogsByUserParamsWithHTTPClient creates a new GetLogsByUserParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLogsByUserParamsWithHTTPClient(client *http.Client) *GetLogsByUserParams {
	var ()
	return &GetLogsByUserParams{
		HTTPClient: client,
	}
}

/*GetLogsByUserParams contains all the parameters to send to the API endpoint
for the get logs by user operation typically these are written to a http.Request
*/
type GetLogsByUserParams struct {

	/*IncludeTotals
	  true if a query summary must be included in the result, false otherwise. Default <code>false</code>.

	*/
	IncludeTotals *bool
	/*Page
	  The page number. Zero based

	*/
	Page *int64
	/*PerPage
	  The amount of entries per page. Default: <code>50</code>. Max value: <code>100</code>

	*/
	PerPage *int64
	/*Sort
	  The field to use for sorting. Use <code>field:order</code> where order is <code>1</code> for ascending and <code>-1</code> for descending. For example <code>date:-1</code>

	*/
	Sort *string
	/*UserID
	  The user_id of the logs to retrieve

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get logs by user params
func (o *GetLogsByUserParams) WithTimeout(timeout time.Duration) *GetLogsByUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get logs by user params
func (o *GetLogsByUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get logs by user params
func (o *GetLogsByUserParams) WithContext(ctx context.Context) *GetLogsByUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get logs by user params
func (o *GetLogsByUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get logs by user params
func (o *GetLogsByUserParams) WithHTTPClient(client *http.Client) *GetLogsByUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get logs by user params
func (o *GetLogsByUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludeTotals adds the includeTotals to the get logs by user params
func (o *GetLogsByUserParams) WithIncludeTotals(includeTotals *bool) *GetLogsByUserParams {
	o.SetIncludeTotals(includeTotals)
	return o
}

// SetIncludeTotals adds the includeTotals to the get logs by user params
func (o *GetLogsByUserParams) SetIncludeTotals(includeTotals *bool) {
	o.IncludeTotals = includeTotals
}

// WithPage adds the page to the get logs by user params
func (o *GetLogsByUserParams) WithPage(page *int64) *GetLogsByUserParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get logs by user params
func (o *GetLogsByUserParams) SetPage(page *int64) {
	o.Page = page
}

// WithPerPage adds the perPage to the get logs by user params
func (o *GetLogsByUserParams) WithPerPage(perPage *int64) *GetLogsByUserParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the get logs by user params
func (o *GetLogsByUserParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WithSort adds the sort to the get logs by user params
func (o *GetLogsByUserParams) WithSort(sort *string) *GetLogsByUserParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get logs by user params
func (o *GetLogsByUserParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithUserID adds the userID to the get logs by user params
func (o *GetLogsByUserParams) WithUserID(userID string) *GetLogsByUserParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the get logs by user params
func (o *GetLogsByUserParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *GetLogsByUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludeTotals != nil {

		// query param include_totals
		var qrIncludeTotals bool
		if o.IncludeTotals != nil {
			qrIncludeTotals = *o.IncludeTotals
		}
		qIncludeTotals := swag.FormatBool(qrIncludeTotals)
		if qIncludeTotals != "" {
			if err := r.SetQueryParam("include_totals", qIncludeTotals); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	// path param user_id
	if err := r.SetPathParam("user_id", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
