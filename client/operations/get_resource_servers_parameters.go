// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"golang.org/x/net/context"
)

// NewGetResourceServersParams creates a new GetResourceServersParams object
// with the default values initialized.
func NewGetResourceServersParams() *GetResourceServersParams {
	var ()
	return &GetResourceServersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetResourceServersParamsWithTimeout creates a new GetResourceServersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetResourceServersParamsWithTimeout(timeout time.Duration) *GetResourceServersParams {
	var ()
	return &GetResourceServersParams{

		timeout: timeout,
	}
}

// NewGetResourceServersParamsWithContext creates a new GetResourceServersParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetResourceServersParamsWithContext(ctx context.Context) *GetResourceServersParams {
	var ()
	return &GetResourceServersParams{

		Context: ctx,
	}
}

// NewGetResourceServersParamsWithHTTPClient creates a new GetResourceServersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetResourceServersParamsWithHTTPClient(client *http.Client) *GetResourceServersParams {
	var ()
	return &GetResourceServersParams{
		HTTPClient: client,
	}
}

/*GetResourceServersParams contains all the parameters to send to the API endpoint
for the get resource servers operation typically these are written to a http.Request
*/
type GetResourceServersParams struct {

	/*IncludeTotals
	  true if a query summary must be included in the result, false otherwise. Default <code>false</code>.

	*/
	IncludeTotals *bool
	/*Page
	  The page number. Zero based.

	*/
	Page *int64
	/*PerPage
	  The amount of entries per page. Default: <code>50</code>. Max value: <code>100</code>. If not present, pagination will be disabled

	*/
	PerPage *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get resource servers params
func (o *GetResourceServersParams) WithTimeout(timeout time.Duration) *GetResourceServersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get resource servers params
func (o *GetResourceServersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get resource servers params
func (o *GetResourceServersParams) WithContext(ctx context.Context) *GetResourceServersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get resource servers params
func (o *GetResourceServersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get resource servers params
func (o *GetResourceServersParams) WithHTTPClient(client *http.Client) *GetResourceServersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get resource servers params
func (o *GetResourceServersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludeTotals adds the includeTotals to the get resource servers params
func (o *GetResourceServersParams) WithIncludeTotals(includeTotals *bool) *GetResourceServersParams {
	o.SetIncludeTotals(includeTotals)
	return o
}

// SetIncludeTotals adds the includeTotals to the get resource servers params
func (o *GetResourceServersParams) SetIncludeTotals(includeTotals *bool) {
	o.IncludeTotals = includeTotals
}

// WithPage adds the page to the get resource servers params
func (o *GetResourceServersParams) WithPage(page *int64) *GetResourceServersParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get resource servers params
func (o *GetResourceServersParams) SetPage(page *int64) {
	o.Page = page
}

// WithPerPage adds the perPage to the get resource servers params
func (o *GetResourceServersParams) WithPerPage(perPage *int64) *GetResourceServersParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the get resource servers params
func (o *GetResourceServersParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WriteToRequest writes these params to a swagger request
func (o *GetResourceServersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludeTotals != nil {

		// query param include_totals
		var qrIncludeTotals bool
		if o.IncludeTotals != nil {
			qrIncludeTotals = *o.IncludeTotals
		}
		qIncludeTotals := swag.FormatBool(qrIncludeTotals)
		if qIncludeTotals != "" {
			if err := r.SetQueryParam("include_totals", qIncludeTotals); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
