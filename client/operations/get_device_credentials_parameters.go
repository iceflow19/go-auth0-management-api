// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"golang.org/x/net/context"
)

// NewGetDeviceCredentialsParams creates a new GetDeviceCredentialsParams object
// with the default values initialized.
func NewGetDeviceCredentialsParams() *GetDeviceCredentialsParams {
	var ()
	return &GetDeviceCredentialsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDeviceCredentialsParamsWithTimeout creates a new GetDeviceCredentialsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDeviceCredentialsParamsWithTimeout(timeout time.Duration) *GetDeviceCredentialsParams {
	var ()
	return &GetDeviceCredentialsParams{

		timeout: timeout,
	}
}

// NewGetDeviceCredentialsParamsWithContext creates a new GetDeviceCredentialsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDeviceCredentialsParamsWithContext(ctx context.Context) *GetDeviceCredentialsParams {
	var ()
	return &GetDeviceCredentialsParams{

		Context: ctx,
	}
}

// NewGetDeviceCredentialsParamsWithHTTPClient creates a new GetDeviceCredentialsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDeviceCredentialsParamsWithHTTPClient(client *http.Client) *GetDeviceCredentialsParams {
	var ()
	return &GetDeviceCredentialsParams{
		HTTPClient: client,
	}
}

/*GetDeviceCredentialsParams contains all the parameters to send to the API endpoint
for the get device credentials operation typically these are written to a http.Request
*/
type GetDeviceCredentialsParams struct {

	/*ClientID
	  The client_id of the devices to retrieve

	*/
	ClientID *string
	/*Fields
	  A comma separated list of fields to include or exclude (depending on include_fields) from the result, empty to retrieve all fields

	*/
	Fields *string
	/*IncludeFields
	  <code>true</code> if the fields specified are to be excluded from the result, <code>false</code> otherwise (defaults to <code>true</code>)

	*/
	IncludeFields *bool
	/*Type
	  The type of credentials

	*/
	Type *string
	/*UserID
	  The user_id of the devices to retrieve

	*/
	UserID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get device credentials params
func (o *GetDeviceCredentialsParams) WithTimeout(timeout time.Duration) *GetDeviceCredentialsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get device credentials params
func (o *GetDeviceCredentialsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get device credentials params
func (o *GetDeviceCredentialsParams) WithContext(ctx context.Context) *GetDeviceCredentialsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get device credentials params
func (o *GetDeviceCredentialsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get device credentials params
func (o *GetDeviceCredentialsParams) WithHTTPClient(client *http.Client) *GetDeviceCredentialsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get device credentials params
func (o *GetDeviceCredentialsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientID adds the clientID to the get device credentials params
func (o *GetDeviceCredentialsParams) WithClientID(clientID *string) *GetDeviceCredentialsParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the get device credentials params
func (o *GetDeviceCredentialsParams) SetClientID(clientID *string) {
	o.ClientID = clientID
}

// WithFields adds the fields to the get device credentials params
func (o *GetDeviceCredentialsParams) WithFields(fields *string) *GetDeviceCredentialsParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the get device credentials params
func (o *GetDeviceCredentialsParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithIncludeFields adds the includeFields to the get device credentials params
func (o *GetDeviceCredentialsParams) WithIncludeFields(includeFields *bool) *GetDeviceCredentialsParams {
	o.SetIncludeFields(includeFields)
	return o
}

// SetIncludeFields adds the includeFields to the get device credentials params
func (o *GetDeviceCredentialsParams) SetIncludeFields(includeFields *bool) {
	o.IncludeFields = includeFields
}

// WithType adds the typeVar to the get device credentials params
func (o *GetDeviceCredentialsParams) WithType(typeVar *string) *GetDeviceCredentialsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get device credentials params
func (o *GetDeviceCredentialsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithUserID adds the userID to the get device credentials params
func (o *GetDeviceCredentialsParams) WithUserID(userID *string) *GetDeviceCredentialsParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the get device credentials params
func (o *GetDeviceCredentialsParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *GetDeviceCredentialsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClientID != nil {

		// query param client_id
		var qrClientID string
		if o.ClientID != nil {
			qrClientID = *o.ClientID
		}
		qClientID := qrClientID
		if qClientID != "" {
			if err := r.SetQueryParam("client_id", qClientID); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.IncludeFields != nil {

		// query param include_fields
		var qrIncludeFields bool
		if o.IncludeFields != nil {
			qrIncludeFields = *o.IncludeFields
		}
		qIncludeFields := swag.FormatBool(qrIncludeFields)
		if qIncludeFields != "" {
			if err := r.SetQueryParam("include_fields", qIncludeFields); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if o.UserID != nil {

		// query param user_id
		var qrUserID string
		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {
			if err := r.SetQueryParam("user_id", qUserID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
