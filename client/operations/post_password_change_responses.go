// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	models "bitbucket.org/troyko/go-auth0-management-api/models"
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// PostPasswordChangeReader is a Reader for the PostPasswordChange structure.
type PostPasswordChangeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostPasswordChangeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostPasswordChangeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewPostPasswordChangeCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostPasswordChangeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPostPasswordChangeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPostPasswordChangeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPostPasswordChangeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewPostPasswordChangeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostPasswordChangeOK creates a PostPasswordChangeOK with default headers values
func NewPostPasswordChangeOK() *PostPasswordChangeOK {
	return &PostPasswordChangeOK{}
}

/*PostPasswordChangeOK handles this case with default header values.

No response was specified
*/
type PostPasswordChangeOK struct {
	Payload *models.PostPasswordChangeResponse
}

func (o *PostPasswordChangeOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/tickets/password-change][%d] postPasswordChangeOK  %+v", 200, o.Payload)
}

func (o *PostPasswordChangeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PostPasswordChangeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostPasswordChangeCreated creates a PostPasswordChangeCreated with default headers values
func NewPostPasswordChangeCreated() *PostPasswordChangeCreated {
	return &PostPasswordChangeCreated{}
}

/*PostPasswordChangeCreated handles this case with default header values.

The ticket was created.
*/
type PostPasswordChangeCreated struct {
}

func (o *PostPasswordChangeCreated) Error() string {
	return fmt.Sprintf("[POST /api/v2/tickets/password-change][%d] postPasswordChangeCreated ", 201)
}

func (o *PostPasswordChangeCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostPasswordChangeBadRequest creates a PostPasswordChangeBadRequest with default headers values
func NewPostPasswordChangeBadRequest() *PostPasswordChangeBadRequest {
	return &PostPasswordChangeBadRequest{}
}

/*PostPasswordChangeBadRequest handles this case with default header values.

The connection with id {connection_id} does not exist
*/
type PostPasswordChangeBadRequest struct {
}

func (o *PostPasswordChangeBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/tickets/password-change][%d] postPasswordChangeBadRequest ", 400)
}

func (o *PostPasswordChangeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostPasswordChangeUnauthorized creates a PostPasswordChangeUnauthorized with default headers values
func NewPostPasswordChangeUnauthorized() *PostPasswordChangeUnauthorized {
	return &PostPasswordChangeUnauthorized{}
}

/*PostPasswordChangeUnauthorized handles this case with default header values.

Invalid signature received for JSON Web Token validation
*/
type PostPasswordChangeUnauthorized struct {
}

func (o *PostPasswordChangeUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/tickets/password-change][%d] postPasswordChangeUnauthorized ", 401)
}

func (o *PostPasswordChangeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostPasswordChangeForbidden creates a PostPasswordChangeForbidden with default headers values
func NewPostPasswordChangeForbidden() *PostPasswordChangeForbidden {
	return &PostPasswordChangeForbidden{}
}

/*PostPasswordChangeForbidden handles this case with default header values.

Insufficient scope, expected any of: create:user_tickets
*/
type PostPasswordChangeForbidden struct {
}

func (o *PostPasswordChangeForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/tickets/password-change][%d] postPasswordChangeForbidden ", 403)
}

func (o *PostPasswordChangeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostPasswordChangeNotFound creates a PostPasswordChangeNotFound with default headers values
func NewPostPasswordChangeNotFound() *PostPasswordChangeNotFound {
	return &PostPasswordChangeNotFound{}
}

/*PostPasswordChangeNotFound handles this case with default header values.

The user does not exist
*/
type PostPasswordChangeNotFound struct {
}

func (o *PostPasswordChangeNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/tickets/password-change][%d] postPasswordChangeNotFound ", 404)
}

func (o *PostPasswordChangeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostPasswordChangeTooManyRequests creates a PostPasswordChangeTooManyRequests with default headers values
func NewPostPasswordChangeTooManyRequests() *PostPasswordChangeTooManyRequests {
	return &PostPasswordChangeTooManyRequests{}
}

/*PostPasswordChangeTooManyRequests handles this case with default header values.

Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.
*/
type PostPasswordChangeTooManyRequests struct {
}

func (o *PostPasswordChangeTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/tickets/password-change][%d] postPasswordChangeTooManyRequests ", 429)
}

func (o *PostPasswordChangeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
