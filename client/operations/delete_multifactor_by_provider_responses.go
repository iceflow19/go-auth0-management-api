// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// DeleteMultifactorByProviderReader is a Reader for the DeleteMultifactorByProvider structure.
type DeleteMultifactorByProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteMultifactorByProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteMultifactorByProviderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewDeleteMultifactorByProviderNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteMultifactorByProviderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewDeleteMultifactorByProviderUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDeleteMultifactorByProviderForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteMultifactorByProviderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewDeleteMultifactorByProviderTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteMultifactorByProviderOK creates a DeleteMultifactorByProviderOK with default headers values
func NewDeleteMultifactorByProviderOK() *DeleteMultifactorByProviderOK {
	return &DeleteMultifactorByProviderOK{}
}

/*DeleteMultifactorByProviderOK handles this case with default header values.

No response was specified
*/
type DeleteMultifactorByProviderOK struct {
}

func (o *DeleteMultifactorByProviderOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/users/{id}/multifactor/{provider}][%d] deleteMultifactorByProviderOK ", 200)
}

func (o *DeleteMultifactorByProviderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteMultifactorByProviderNoContent creates a DeleteMultifactorByProviderNoContent with default headers values
func NewDeleteMultifactorByProviderNoContent() *DeleteMultifactorByProviderNoContent {
	return &DeleteMultifactorByProviderNoContent{}
}

/*DeleteMultifactorByProviderNoContent handles this case with default header values.

The multifactor provider no longer exists for the user.
*/
type DeleteMultifactorByProviderNoContent struct {
}

func (o *DeleteMultifactorByProviderNoContent) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/users/{id}/multifactor/{provider}][%d] deleteMultifactorByProviderNoContent ", 204)
}

func (o *DeleteMultifactorByProviderNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteMultifactorByProviderBadRequest creates a DeleteMultifactorByProviderBadRequest with default headers values
func NewDeleteMultifactorByProviderBadRequest() *DeleteMultifactorByProviderBadRequest {
	return &DeleteMultifactorByProviderBadRequest{}
}

/*DeleteMultifactorByProviderBadRequest handles this case with default header values.

Invalid request URI. The message will vary depending on the cause.
*/
type DeleteMultifactorByProviderBadRequest struct {
}

func (o *DeleteMultifactorByProviderBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/users/{id}/multifactor/{provider}][%d] deleteMultifactorByProviderBadRequest ", 400)
}

func (o *DeleteMultifactorByProviderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteMultifactorByProviderUnauthorized creates a DeleteMultifactorByProviderUnauthorized with default headers values
func NewDeleteMultifactorByProviderUnauthorized() *DeleteMultifactorByProviderUnauthorized {
	return &DeleteMultifactorByProviderUnauthorized{}
}

/*DeleteMultifactorByProviderUnauthorized handles this case with default header values.

Invalid signature received for JSON Web Token validation
*/
type DeleteMultifactorByProviderUnauthorized struct {
}

func (o *DeleteMultifactorByProviderUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/users/{id}/multifactor/{provider}][%d] deleteMultifactorByProviderUnauthorized ", 401)
}

func (o *DeleteMultifactorByProviderUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteMultifactorByProviderForbidden creates a DeleteMultifactorByProviderForbidden with default headers values
func NewDeleteMultifactorByProviderForbidden() *DeleteMultifactorByProviderForbidden {
	return &DeleteMultifactorByProviderForbidden{}
}

/*DeleteMultifactorByProviderForbidden handles this case with default header values.

Insufficient scope, expected any of: update:users
*/
type DeleteMultifactorByProviderForbidden struct {
}

func (o *DeleteMultifactorByProviderForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/users/{id}/multifactor/{provider}][%d] deleteMultifactorByProviderForbidden ", 403)
}

func (o *DeleteMultifactorByProviderForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteMultifactorByProviderNotFound creates a DeleteMultifactorByProviderNotFound with default headers values
func NewDeleteMultifactorByProviderNotFound() *DeleteMultifactorByProviderNotFound {
	return &DeleteMultifactorByProviderNotFound{}
}

/*DeleteMultifactorByProviderNotFound handles this case with default header values.

The user does not exist.
*/
type DeleteMultifactorByProviderNotFound struct {
}

func (o *DeleteMultifactorByProviderNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/users/{id}/multifactor/{provider}][%d] deleteMultifactorByProviderNotFound ", 404)
}

func (o *DeleteMultifactorByProviderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteMultifactorByProviderTooManyRequests creates a DeleteMultifactorByProviderTooManyRequests with default headers values
func NewDeleteMultifactorByProviderTooManyRequests() *DeleteMultifactorByProviderTooManyRequests {
	return &DeleteMultifactorByProviderTooManyRequests{}
}

/*DeleteMultifactorByProviderTooManyRequests handles this case with default header values.

Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.
*/
type DeleteMultifactorByProviderTooManyRequests struct {
}

func (o *DeleteMultifactorByProviderTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/users/{id}/multifactor/{provider}][%d] deleteMultifactorByProviderTooManyRequests ", 429)
}

func (o *DeleteMultifactorByProviderTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
