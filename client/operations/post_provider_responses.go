// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	models "bitbucket.org/troyko/go-auth0-management-api/models"
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// PostProviderReader is a Reader for the PostProvider structure.
type PostProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostProviderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostProviderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPostProviderUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPostProviderForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPostProviderConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewPostProviderTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostProviderOK creates a PostProviderOK with default headers values
func NewPostProviderOK() *PostProviderOK {
	return &PostProviderOK{}
}

/*PostProviderOK handles this case with default header values.

The email provider was retrieved. See <strong>Response Class</strong> below for schema.
*/
type PostProviderOK struct {
	Payload *models.PostProviderResponse
}

func (o *PostProviderOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/emails/provider][%d] postProviderOK  %+v", 200, o.Payload)
}

func (o *PostProviderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PostProviderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostProviderBadRequest creates a PostProviderBadRequest with default headers values
func NewPostProviderBadRequest() *PostProviderBadRequest {
	return &PostProviderBadRequest{}
}

/*PostProviderBadRequest handles this case with default header values.

Invalid request body. The message will vary depending on the cause.
*/
type PostProviderBadRequest struct {
}

func (o *PostProviderBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/emails/provider][%d] postProviderBadRequest ", 400)
}

func (o *PostProviderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostProviderUnauthorized creates a PostProviderUnauthorized with default headers values
func NewPostProviderUnauthorized() *PostProviderUnauthorized {
	return &PostProviderUnauthorized{}
}

/*PostProviderUnauthorized handles this case with default header values.

Invalid signature received for JSON Web Token validation
*/
type PostProviderUnauthorized struct {
}

func (o *PostProviderUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/emails/provider][%d] postProviderUnauthorized ", 401)
}

func (o *PostProviderUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostProviderForbidden creates a PostProviderForbidden with default headers values
func NewPostProviderForbidden() *PostProviderForbidden {
	return &PostProviderForbidden{}
}

/*PostProviderForbidden handles this case with default header values.

Insufficient scope, expected any of: create:email_provider
*/
type PostProviderForbidden struct {
}

func (o *PostProviderForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/emails/provider][%d] postProviderForbidden ", 403)
}

func (o *PostProviderForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostProviderConflict creates a PostProviderConflict with default headers values
func NewPostProviderConflict() *PostProviderConflict {
	return &PostProviderConflict{}
}

/*PostProviderConflict handles this case with default header values.

An email provider is already configured
*/
type PostProviderConflict struct {
}

func (o *PostProviderConflict) Error() string {
	return fmt.Sprintf("[POST /api/v2/emails/provider][%d] postProviderConflict ", 409)
}

func (o *PostProviderConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostProviderTooManyRequests creates a PostProviderTooManyRequests with default headers values
func NewPostProviderTooManyRequests() *PostProviderTooManyRequests {
	return &PostProviderTooManyRequests{}
}

/*PostProviderTooManyRequests handles this case with default header values.

Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.
*/
type PostProviderTooManyRequests struct {
}

func (o *PostProviderTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/emails/provider][%d] postProviderTooManyRequests ", 429)
}

func (o *PostProviderTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
