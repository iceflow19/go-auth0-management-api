// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	models "bitbucket.org/troyko/go-auth0-management-api/models"
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// PatchConnectionsByIDReader is a Reader for the PatchConnectionsByID structure.
type PatchConnectionsByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConnectionsByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchConnectionsByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchConnectionsByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPatchConnectionsByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPatchConnectionsByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchConnectionsByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPatchConnectionsByIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewPatchConnectionsByIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchConnectionsByIDOK creates a PatchConnectionsByIDOK with default headers values
func NewPatchConnectionsByIDOK() *PatchConnectionsByIDOK {
	return &PatchConnectionsByIDOK{}
}

/*PatchConnectionsByIDOK handles this case with default header values.

The connection was updated. See <strong>Response Class</strong> below for schema.
*/
type PatchConnectionsByIDOK struct {
	Payload *models.PatchConnectionsByIDResponse
}

func (o *PatchConnectionsByIDOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/connections/{id}][%d] patchConnectionsByIdOK  %+v", 200, o.Payload)
}

func (o *PatchConnectionsByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PatchConnectionsByIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConnectionsByIDBadRequest creates a PatchConnectionsByIDBadRequest with default headers values
func NewPatchConnectionsByIDBadRequest() *PatchConnectionsByIDBadRequest {
	return &PatchConnectionsByIDBadRequest{}
}

/*PatchConnectionsByIDBadRequest handles this case with default header values.

This database contains X users. You cannot change "options.enabledDatabaseCustomization" setting.
*/
type PatchConnectionsByIDBadRequest struct {
}

func (o *PatchConnectionsByIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/connections/{id}][%d] patchConnectionsByIdBadRequest ", 400)
}

func (o *PatchConnectionsByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchConnectionsByIDUnauthorized creates a PatchConnectionsByIDUnauthorized with default headers values
func NewPatchConnectionsByIDUnauthorized() *PatchConnectionsByIDUnauthorized {
	return &PatchConnectionsByIDUnauthorized{}
}

/*PatchConnectionsByIDUnauthorized handles this case with default header values.

Invalid signature received for JSON Web Token validation
*/
type PatchConnectionsByIDUnauthorized struct {
}

func (o *PatchConnectionsByIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/connections/{id}][%d] patchConnectionsByIdUnauthorized ", 401)
}

func (o *PatchConnectionsByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchConnectionsByIDForbidden creates a PatchConnectionsByIDForbidden with default headers values
func NewPatchConnectionsByIDForbidden() *PatchConnectionsByIDForbidden {
	return &PatchConnectionsByIDForbidden{}
}

/*PatchConnectionsByIDForbidden handles this case with default header values.

Insufficient scope, expected any of: update:connections
*/
type PatchConnectionsByIDForbidden struct {
}

func (o *PatchConnectionsByIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/connections/{id}][%d] patchConnectionsByIdForbidden ", 403)
}

func (o *PatchConnectionsByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchConnectionsByIDNotFound creates a PatchConnectionsByIDNotFound with default headers values
func NewPatchConnectionsByIDNotFound() *PatchConnectionsByIDNotFound {
	return &PatchConnectionsByIDNotFound{}
}

/*PatchConnectionsByIDNotFound handles this case with default header values.

The connection does not exist
*/
type PatchConnectionsByIDNotFound struct {
}

func (o *PatchConnectionsByIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/connections/{id}][%d] patchConnectionsByIdNotFound ", 404)
}

func (o *PatchConnectionsByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchConnectionsByIDConflict creates a PatchConnectionsByIDConflict with default headers values
func NewPatchConnectionsByIDConflict() *PatchConnectionsByIDConflict {
	return &PatchConnectionsByIDConflict{}
}

/*PatchConnectionsByIDConflict handles this case with default header values.

The name/client_id tuple has already been used for another connection
*/
type PatchConnectionsByIDConflict struct {
}

func (o *PatchConnectionsByIDConflict) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/connections/{id}][%d] patchConnectionsByIdConflict ", 409)
}

func (o *PatchConnectionsByIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchConnectionsByIDTooManyRequests creates a PatchConnectionsByIDTooManyRequests with default headers values
func NewPatchConnectionsByIDTooManyRequests() *PatchConnectionsByIDTooManyRequests {
	return &PatchConnectionsByIDTooManyRequests{}
}

/*PatchConnectionsByIDTooManyRequests handles this case with default header values.

Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.
*/
type PatchConnectionsByIDTooManyRequests struct {
}

func (o *PatchConnectionsByIDTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/connections/{id}][%d] patchConnectionsByIdTooManyRequests ", 429)
}

func (o *PatchConnectionsByIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
