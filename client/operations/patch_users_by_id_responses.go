// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	models "bitbucket.org/troyko/go-auth0-management-api/models"
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// PatchUsersByIDReader is a Reader for the PatchUsersByID structure.
type PatchUsersByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchUsersByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchUsersByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchUsersByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPatchUsersByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPatchUsersByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchUsersByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewPatchUsersByIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchUsersByIDOK creates a PatchUsersByIDOK with default headers values
func NewPatchUsersByIDOK() *PatchUsersByIDOK {
	return &PatchUsersByIDOK{}
}

/*PatchUsersByIDOK handles this case with default header values.

The user was updated. See <strong>Response Class</strong> below for schema.
*/
type PatchUsersByIDOK struct {
	Payload *models.PatchUsersByIDResponse
}

func (o *PatchUsersByIDOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{id}][%d] patchUsersByIdOK  %+v", 200, o.Payload)
}

func (o *PatchUsersByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PatchUsersByIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUsersByIDBadRequest creates a PatchUsersByIDBadRequest with default headers values
func NewPatchUsersByIDBadRequest() *PatchUsersByIDBadRequest {
	return &PatchUsersByIDBadRequest{}
}

/*PatchUsersByIDBadRequest handles this case with default header values.

The verify_email and email_verified parameters can't be true at same time
*/
type PatchUsersByIDBadRequest struct {
}

func (o *PatchUsersByIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{id}][%d] patchUsersByIdBadRequest ", 400)
}

func (o *PatchUsersByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchUsersByIDUnauthorized creates a PatchUsersByIDUnauthorized with default headers values
func NewPatchUsersByIDUnauthorized() *PatchUsersByIDUnauthorized {
	return &PatchUsersByIDUnauthorized{}
}

/*PatchUsersByIDUnauthorized handles this case with default header values.

Invalid signature received for JSON Web Token validation
*/
type PatchUsersByIDUnauthorized struct {
}

func (o *PatchUsersByIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{id}][%d] patchUsersByIdUnauthorized ", 401)
}

func (o *PatchUsersByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchUsersByIDForbidden creates a PatchUsersByIDForbidden with default headers values
func NewPatchUsersByIDForbidden() *PatchUsersByIDForbidden {
	return &PatchUsersByIDForbidden{}
}

/*PatchUsersByIDForbidden handles this case with default header values.

Insufficient scope, expected any of: update:users,update:users_app_metadata,update:current_user_metadata
*/
type PatchUsersByIDForbidden struct {
}

func (o *PatchUsersByIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{id}][%d] patchUsersByIdForbidden ", 403)
}

func (o *PatchUsersByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchUsersByIDNotFound creates a PatchUsersByIDNotFound with default headers values
func NewPatchUsersByIDNotFound() *PatchUsersByIDNotFound {
	return &PatchUsersByIDNotFound{}
}

/*PatchUsersByIDNotFound handles this case with default header values.

The user does not exist.
*/
type PatchUsersByIDNotFound struct {
}

func (o *PatchUsersByIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{id}][%d] patchUsersByIdNotFound ", 404)
}

func (o *PatchUsersByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchUsersByIDTooManyRequests creates a PatchUsersByIDTooManyRequests with default headers values
func NewPatchUsersByIDTooManyRequests() *PatchUsersByIDTooManyRequests {
	return &PatchUsersByIDTooManyRequests{}
}

/*PatchUsersByIDTooManyRequests handles this case with default header values.

Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.
*/
type PatchUsersByIDTooManyRequests struct {
}

func (o *PatchUsersByIDTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/users/{id}][%d] patchUsersByIdTooManyRequests ", 429)
}

func (o *PatchUsersByIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
