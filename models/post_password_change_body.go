// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostPasswordChangeBody post password change body
// swagger:model post_password-change_body
type PostPasswordChangeBody struct {

	// The connection that provides the identity for which the password is to be changed. If sending this parameter, the email is also required and the user_id is invalid
	ConnectionID *string `json:"connection_id,omitempty"`

	// The user's email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// The user will be redirected to this endpoint once the ticket is used
	ResultURL *string `json:"result_url,omitempty"`

	// The ticket's lifetime in seconds starting from the moment of creation. After expiration, the ticket cannot be used to change the user's password. If not specified or if you send 0, the Auth0 default lifetime of 5 days will be applied
	// Minimum: 0
	TTLSec *int64 `json:"ttl_sec,omitempty"`

	// The user_id of for which the ticket is to be created
	UserID string `json:"user_id,omitempty"`
}

// Validate validates this post password change body
func (m *PostPasswordChangeBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTLSec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostPasswordChangeBody) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PostPasswordChangeBody) validateTTLSec(formats strfmt.Registry) error {

	if swag.IsZero(m.TTLSec) { // not required
		return nil
	}

	if err := validate.MinimumInt("ttl_sec", "body", int64(*m.TTLSec), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostPasswordChangeBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostPasswordChangeBody) UnmarshalBinary(b []byte) error {
	var res PostPasswordChangeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
