// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCustomDomainsByIDResponseVerification The custom domain verification settings.
// swagger:model get_custom-domains_by_id_response_verification
type GetCustomDomainsByIDResponseVerification struct {

	// The custom domain verification methods.
	// Min Items: 1
	Methods []*GetCustomDomainsByIDResponseVerificationMethodsItems0 `json:"methods"`
}

// Validate validates this get custom domains by id response verification
func (m *GetCustomDomainsByIDResponseVerification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMethods(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCustomDomainsByIDResponseVerification) validateMethods(formats strfmt.Registry) error {

	if swag.IsZero(m.Methods) { // not required
		return nil
	}

	iMethodsSize := int64(len(m.Methods))

	if err := validate.MinItems("methods", "body", iMethodsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Methods); i++ {
		if swag.IsZero(m.Methods[i]) { // not required
			continue
		}

		if m.Methods[i] != nil {
			if err := m.Methods[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("methods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCustomDomainsByIDResponseVerification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCustomDomainsByIDResponseVerification) UnmarshalBinary(b []byte) error {
	var res GetCustomDomainsByIDResponseVerification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetCustomDomainsByIDResponseVerificationMethodsItems0 get custom domains by ID response verification methods items0
// swagger:model GetCustomDomainsByIDResponseVerificationMethodsItems0
type GetCustomDomainsByIDResponseVerificationMethodsItems0 struct {

	// The custom domain verification method.
	// Required: true
	// Enum: [cname txt]
	Name *string `json:"name"`

	// The value used to verify the custom domain.
	// Required: true
	Record *string `json:"record"`
}

// Validate validates this get custom domains by ID response verification methods items0
func (m *GetCustomDomainsByIDResponseVerificationMethodsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecord(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getCustomDomainsByIdResponseVerificationMethodsItems0TypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cname","txt"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCustomDomainsByIdResponseVerificationMethodsItems0TypeNamePropEnum = append(getCustomDomainsByIdResponseVerificationMethodsItems0TypeNamePropEnum, v)
	}
}

const (

	// GetCustomDomainsByIDResponseVerificationMethodsItems0NameCname captures enum value "cname"
	GetCustomDomainsByIDResponseVerificationMethodsItems0NameCname string = "cname"

	// GetCustomDomainsByIDResponseVerificationMethodsItems0NameTxt captures enum value "txt"
	GetCustomDomainsByIDResponseVerificationMethodsItems0NameTxt string = "txt"
)

// prop value enum
func (m *GetCustomDomainsByIDResponseVerificationMethodsItems0) validateNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getCustomDomainsByIdResponseVerificationMethodsItems0TypeNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetCustomDomainsByIDResponseVerificationMethodsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	// value enum
	if err := m.validateNameEnum("name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

func (m *GetCustomDomainsByIDResponseVerificationMethodsItems0) validateRecord(formats strfmt.Registry) error {

	if err := validate.Required("record", "body", m.Record); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCustomDomainsByIDResponseVerificationMethodsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCustomDomainsByIDResponseVerificationMethodsItems0) UnmarshalBinary(b []byte) error {
	var res GetCustomDomainsByIDResponseVerificationMethodsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
