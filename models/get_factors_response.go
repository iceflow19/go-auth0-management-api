// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetFactorsResponse get factors response
// swagger:model get_factors_response
type GetFactorsResponse struct {

	// States if this factor is enabled
	// Required: true
	Enabled bool `json:"enabled"`

	// Factor name
	// Enum: [sms push-notification]
	Name *string `json:"name,omitempty"`

	// For factors with trial limits (e.g. SMS) states if those limits have been exceed
	TrialExpired *bool `json:"trial_expired,omitempty"`
}

// Validate validates this get factors response
func (m *GetFactorsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetFactorsResponse) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", bool(m.Enabled)); err != nil {
		return err
	}

	return nil
}

var getFactorsResponseTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sms","push-notification"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getFactorsResponseTypeNamePropEnum = append(getFactorsResponseTypeNamePropEnum, v)
	}
}

const (

	// GetFactorsResponseNameSms captures enum value "sms"
	GetFactorsResponseNameSms string = "sms"

	// GetFactorsResponseNamePushNotification captures enum value "push-notification"
	GetFactorsResponseNamePushNotification string = "push-notification"
)

// prop value enum
func (m *GetFactorsResponse) validateNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getFactorsResponseTypeNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetFactorsResponse) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetFactorsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetFactorsResponse) UnmarshalBinary(b []byte) error {
	var res GetFactorsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
