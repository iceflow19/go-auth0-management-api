// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostUsersBody post users body
// swagger:model post_users_body
type PostUsersBody struct {

	// app metadata
	AppMetadata PostUsersBodyAppMetadata `json:"app_metadata,omitempty"`

	// The connection the user belongs to
	// Required: true
	Connection *string `json:"connection"`

	// The user's email
	// Format: email
	Email *strfmt.Email `json:"email,omitempty"`

	// <code>true</code> if the user's email is verified, <code>false</code> otherwise. If it is <code>true</code> then the user will not receive a verification email, unless <code>verify_email: true</code> was specified
	EmailVerified *bool `json:"email_verified,omitempty"`

	// The user's password (mandatory for non SMS connections)
	Password *string `json:"password,omitempty"`

	// The user's phone number (following the E.164 recommendation), only valid for users to be added to SMS connections
	PhoneNumber *string `json:"phone_number,omitempty"`

	// <code>true</code> if the user's phone number is verified, <code>false</code> otherwise. When the user is added to a SMS connection, they will not receive an verification SMS if this is <code>true</code>.
	PhoneVerified *bool `json:"phone_verified,omitempty"`

	// The id of the user
	UserID string `json:"user_id,omitempty"`

	// user metadata
	UserMetadata PostUsersBodyUserMetadata `json:"user_metadata,omitempty"`

	// The user's username. Only valid if the connection requires a username
	Username *string `json:"username,omitempty"`

	// If <code>true</code>, the user will receive a verification email after creation, even if created with <code>email_verified</code> set to <code>true</code>. If <code>false</code>, the user will not receive a verification email, even if created with <code>email_verified</code> set to <code>false</code>. If unspecified, defaults to the behavior determined by the value of <code>email_verified</code>.
	VerifyEmail *bool `json:"verify_email,omitempty"`
}

// Validate validates this post users body
func (m *PostUsersBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostUsersBody) validateConnection(formats strfmt.Registry) error {

	if err := validate.Required("connection", "body", m.Connection); err != nil {
		return err
	}

	return nil
}

func (m *PostUsersBody) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostUsersBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostUsersBody) UnmarshalBinary(b []byte) error {
	var res PostUsersBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
