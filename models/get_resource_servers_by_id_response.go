// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetResourceServersByIDResponse get resource servers by id response
// swagger:model get_resource-servers_by_id_response
type GetResourceServersByIDResponse struct {

	// Allows issuance of refresh tokens for this entity
	AllowOfflineAccess bool `json:"allow_offline_access,omitempty"`

	// The id of the resource server.
	ID string `json:"id,omitempty"`

	// The identifier of the resource server.
	Identifier string `json:"identifier,omitempty"`

	// Whether this API is a system API
	IsSystem bool `json:"is_system,omitempty"`

	// The name of the resource server.
	Name string `json:"name,omitempty"`

	// scopes
	Scopes []*GetResourceServersByIDResponseScopesItems0 `json:"scopes"`

	// The algorithm used to sign tokens
	// Enum: [HS256 RS256]
	SigningAlg string `json:"signing_alg,omitempty"`

	// The secret used to sign tokens when using symmetric algorithms
	SigningSecret string `json:"signing_secret,omitempty"`

	// Flag this entity as capable of skipping consent
	SkipConsentForVerifiableFirstPartyClients bool `json:"skip_consent_for_verifiable_first_party_clients,omitempty"`

	// The amount of time (in seconds) that the token will be valid after being issued
	TokenLifetime int64 `json:"token_lifetime,omitempty"`

	// The amount of time (in seconds) that the token will be valid after being issued from browser based flows. Value cannot be larger than token_lifetime.
	TokenLifetimeForWeb int64 `json:"token_lifetime_for_web,omitempty"`
}

// Validate validates this get resource servers by id response
func (m *GetResourceServersByIDResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScopes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSigningAlg(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetResourceServersByIDResponse) validateScopes(formats strfmt.Registry) error {

	if swag.IsZero(m.Scopes) { // not required
		return nil
	}

	for i := 0; i < len(m.Scopes); i++ {
		if swag.IsZero(m.Scopes[i]) { // not required
			continue
		}

		if m.Scopes[i] != nil {
			if err := m.Scopes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scopes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var getResourceServersByIdResponseTypeSigningAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HS256","RS256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getResourceServersByIdResponseTypeSigningAlgPropEnum = append(getResourceServersByIdResponseTypeSigningAlgPropEnum, v)
	}
}

const (

	// GetResourceServersByIDResponseSigningAlgHS256 captures enum value "HS256"
	GetResourceServersByIDResponseSigningAlgHS256 string = "HS256"

	// GetResourceServersByIDResponseSigningAlgRS256 captures enum value "RS256"
	GetResourceServersByIDResponseSigningAlgRS256 string = "RS256"
)

// prop value enum
func (m *GetResourceServersByIDResponse) validateSigningAlgEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getResourceServersByIdResponseTypeSigningAlgPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetResourceServersByIDResponse) validateSigningAlg(formats strfmt.Registry) error {

	if swag.IsZero(m.SigningAlg) { // not required
		return nil
	}

	// value enum
	if err := m.validateSigningAlgEnum("signing_alg", "body", m.SigningAlg); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetResourceServersByIDResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetResourceServersByIDResponse) UnmarshalBinary(b []byte) error {
	var res GetResourceServersByIDResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetResourceServersByIDResponseScopesItems0 get resource servers by ID response scopes items0
// swagger:model GetResourceServersByIDResponseScopesItems0
type GetResourceServersByIDResponseScopesItems0 struct {

	// A user-friendly description of the scope.
	Description string `json:"description,omitempty"`

	// The scope value.
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this get resource servers by ID response scopes items0
func (m *GetResourceServersByIDResponseScopesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetResourceServersByIDResponseScopesItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetResourceServersByIDResponseScopesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetResourceServersByIDResponseScopesItems0) UnmarshalBinary(b []byte) error {
	var res GetResourceServersByIDResponseScopesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
