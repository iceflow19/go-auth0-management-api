// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchConnectionsByIDBodyPasswordExpiration Options for password expiration policy
// swagger:model patch_connections_by_id_body_password_expiration
type PatchConnectionsByIDBodyPasswordExpiration struct {

	// enable
	// Required: true
	Enable *bool `json:"enable"`

	// expire after
	// Maximum: 365
	// Minimum: 0
	ExpireAfter *int64 `json:"expire_after,omitempty"`

	// warn after
	// Maximum: 365
	// Minimum: 0
	WarnAfter *int64 `json:"warn_after,omitempty"`
}

// Validate validates this patch connections by id body password expiration
func (m *PatchConnectionsByIDBodyPasswordExpiration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpireAfter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarnAfter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchConnectionsByIDBodyPasswordExpiration) validateEnable(formats strfmt.Registry) error {

	if err := validate.Required("enable", "body", m.Enable); err != nil {
		return err
	}

	return nil
}

func (m *PatchConnectionsByIDBodyPasswordExpiration) validateExpireAfter(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpireAfter) { // not required
		return nil
	}

	if err := validate.MinimumInt("expire_after", "body", int64(*m.ExpireAfter), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("expire_after", "body", int64(*m.ExpireAfter), 365, false); err != nil {
		return err
	}

	return nil
}

func (m *PatchConnectionsByIDBodyPasswordExpiration) validateWarnAfter(formats strfmt.Registry) error {

	if swag.IsZero(m.WarnAfter) { // not required
		return nil
	}

	if err := validate.MinimumInt("warn_after", "body", int64(*m.WarnAfter), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("warn_after", "body", int64(*m.WarnAfter), 365, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchConnectionsByIDBodyPasswordExpiration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchConnectionsByIDBodyPasswordExpiration) UnmarshalBinary(b []byte) error {
	var res PatchConnectionsByIDBodyPasswordExpiration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
