// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostProviderBody post provider body
// swagger:model post_provider_body
type PostProviderBody struct {

	// credentials
	// Required: true
	Credentials *PostProviderBodyCredentials `json:"credentials"`

	// The default from address
	DefaultFromAddress string `json:"default_from_address,omitempty"`

	// <code>true</code> if the email provider is enabled, <code>false</code> otherwise (defaults to <code>true</code>)
	Enabled *bool `json:"enabled,omitempty"`

	// The name of the email provider
	// Required: true
	// Enum: [mandrill sendgrid sparkpost ses smtp]
	Name *string `json:"name"`

	// settings
	Settings PostProviderBodySettings `json:"settings,omitempty"`
}

// Validate validates this post provider body
func (m *PostProviderBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostProviderBody) validateCredentials(formats strfmt.Registry) error {

	if err := validate.Required("credentials", "body", m.Credentials); err != nil {
		return err
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

var postProviderBodyTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mandrill","sendgrid","sparkpost","ses","smtp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postProviderBodyTypeNamePropEnum = append(postProviderBodyTypeNamePropEnum, v)
	}
}

const (

	// PostProviderBodyNameMandrill captures enum value "mandrill"
	PostProviderBodyNameMandrill string = "mandrill"

	// PostProviderBodyNameSendgrid captures enum value "sendgrid"
	PostProviderBodyNameSendgrid string = "sendgrid"

	// PostProviderBodyNameSparkpost captures enum value "sparkpost"
	PostProviderBodyNameSparkpost string = "sparkpost"

	// PostProviderBodyNameSes captures enum value "ses"
	PostProviderBodyNameSes string = "ses"

	// PostProviderBodyNameSMTP captures enum value "smtp"
	PostProviderBodyNameSMTP string = "smtp"
)

// prop value enum
func (m *PostProviderBody) validateNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postProviderBodyTypeNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostProviderBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	// value enum
	if err := m.validateNameEnum("name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostProviderBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostProviderBody) UnmarshalBinary(b []byte) error {
	var res PostProviderBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
