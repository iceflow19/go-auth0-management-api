// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostConnectionsBodyOptions The connection's options (depend on the connection strategy)
// swagger:model post_connections_body_options
type PostConnectionsBodyOptions struct {

	// api enable users
	APIEnableUsers *bool `json:"api_enable_users,omitempty"`

	// basic profile
	BasicProfile *bool `json:"basic_profile,omitempty"`

	// ext admin
	ExtAdmin bool `json:"ext_admin,omitempty"`

	// ext agreed terms
	ExtAgreedTerms bool `json:"ext_agreed_terms,omitempty"`

	// ext assigned plans
	ExtAssignedPlans bool `json:"ext_assigned_plans,omitempty"`

	// ext groups
	ExtGroups bool `json:"ext_groups,omitempty"`

	// ext is suspended
	ExtIsSuspended bool `json:"ext_is_suspended,omitempty"`

	// ext profile
	ExtProfile bool `json:"ext_profile,omitempty"`

	// Password strength level
	// Enum: [none low fair good excellent]
	PasswordPolicy string `json:"passwordPolicy,omitempty"`

	// password complexity options
	PasswordComplexityOptions *PostConnectionsBodyOptionsPasswordComplexityOptions `json:"password_complexity_options,omitempty"`

	// password dictionary
	PasswordDictionary *PostConnectionsBodyOptionsPasswordDictionary `json:"password_dictionary,omitempty"`

	// password history
	PasswordHistory *PostConnectionsBodyOptionsPasswordHistory `json:"password_history,omitempty"`

	// password no personal info
	PasswordNoPersonalInfo *PostConnectionsBodyOptionsPasswordNoPersonalInfo `json:"password_no_personal_info,omitempty"`

	// Options for adding parameters in the request to the upstream IdP
	UpstreamParams interface{} `json:"upstream_params,omitempty"`

	// validation
	Validation *PostConnectionsBodyOptionsValidation `json:"validation,omitempty"`
}

// Validate validates this post connections body options
func (m *PostConnectionsBodyOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePasswordPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordComplexityOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordDictionary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordHistory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordNoPersonalInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postConnectionsBodyOptionsTypePasswordPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","low","fair","good","excellent"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postConnectionsBodyOptionsTypePasswordPolicyPropEnum = append(postConnectionsBodyOptionsTypePasswordPolicyPropEnum, v)
	}
}

const (

	// PostConnectionsBodyOptionsPasswordPolicyNone captures enum value "none"
	PostConnectionsBodyOptionsPasswordPolicyNone string = "none"

	// PostConnectionsBodyOptionsPasswordPolicyLow captures enum value "low"
	PostConnectionsBodyOptionsPasswordPolicyLow string = "low"

	// PostConnectionsBodyOptionsPasswordPolicyFair captures enum value "fair"
	PostConnectionsBodyOptionsPasswordPolicyFair string = "fair"

	// PostConnectionsBodyOptionsPasswordPolicyGood captures enum value "good"
	PostConnectionsBodyOptionsPasswordPolicyGood string = "good"

	// PostConnectionsBodyOptionsPasswordPolicyExcellent captures enum value "excellent"
	PostConnectionsBodyOptionsPasswordPolicyExcellent string = "excellent"
)

// prop value enum
func (m *PostConnectionsBodyOptions) validatePasswordPolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postConnectionsBodyOptionsTypePasswordPolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostConnectionsBodyOptions) validatePasswordPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.PasswordPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validatePasswordPolicyEnum("passwordPolicy", "body", m.PasswordPolicy); err != nil {
		return err
	}

	return nil
}

func (m *PostConnectionsBodyOptions) validatePasswordComplexityOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.PasswordComplexityOptions) { // not required
		return nil
	}

	if m.PasswordComplexityOptions != nil {
		if err := m.PasswordComplexityOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_complexity_options")
			}
			return err
		}
	}

	return nil
}

func (m *PostConnectionsBodyOptions) validatePasswordDictionary(formats strfmt.Registry) error {

	if swag.IsZero(m.PasswordDictionary) { // not required
		return nil
	}

	if m.PasswordDictionary != nil {
		if err := m.PasswordDictionary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_dictionary")
			}
			return err
		}
	}

	return nil
}

func (m *PostConnectionsBodyOptions) validatePasswordHistory(formats strfmt.Registry) error {

	if swag.IsZero(m.PasswordHistory) { // not required
		return nil
	}

	if m.PasswordHistory != nil {
		if err := m.PasswordHistory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_history")
			}
			return err
		}
	}

	return nil
}

func (m *PostConnectionsBodyOptions) validatePasswordNoPersonalInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.PasswordNoPersonalInfo) { // not required
		return nil
	}

	if m.PasswordNoPersonalInfo != nil {
		if err := m.PasswordNoPersonalInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_no_personal_info")
			}
			return err
		}
	}

	return nil
}

func (m *PostConnectionsBodyOptions) validateValidation(formats strfmt.Registry) error {

	if swag.IsZero(m.Validation) { // not required
		return nil
	}

	if m.Validation != nil {
		if err := m.Validation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostConnectionsBodyOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostConnectionsBodyOptions) UnmarshalBinary(b []byte) error {
	var res PostConnectionsBodyOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PostConnectionsBodyOptionsPasswordComplexityOptions Password complexity options
// swagger:model PostConnectionsBodyOptionsPasswordComplexityOptions
type PostConnectionsBodyOptionsPasswordComplexityOptions struct {

	// Minimum password length
	// Maximum: 128
	// Minimum: 1
	MinLength int64 `json:"min_length,omitempty"`
}

// Validate validates this post connections body options password complexity options
func (m *PostConnectionsBodyOptionsPasswordComplexityOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMinLength(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostConnectionsBodyOptionsPasswordComplexityOptions) validateMinLength(formats strfmt.Registry) error {

	if swag.IsZero(m.MinLength) { // not required
		return nil
	}

	if err := validate.MinimumInt("password_complexity_options"+"."+"min_length", "body", int64(m.MinLength), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("password_complexity_options"+"."+"min_length", "body", int64(m.MinLength), 128, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostConnectionsBodyOptionsPasswordComplexityOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostConnectionsBodyOptionsPasswordComplexityOptions) UnmarshalBinary(b []byte) error {
	var res PostConnectionsBodyOptionsPasswordComplexityOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PostConnectionsBodyOptionsPasswordDictionary Options for password dictionary policy
// swagger:model PostConnectionsBodyOptionsPasswordDictionary
type PostConnectionsBodyOptionsPasswordDictionary struct {

	// Custom Password Dictionary. An array of up to 200 entries.
	// Max Items: 200
	Dictionary []string `json:"dictionary"`

	// enable
	// Required: true
	Enable *bool `json:"enable"`
}

// Validate validates this post connections body options password dictionary
func (m *PostConnectionsBodyOptionsPasswordDictionary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDictionary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostConnectionsBodyOptionsPasswordDictionary) validateDictionary(formats strfmt.Registry) error {

	if swag.IsZero(m.Dictionary) { // not required
		return nil
	}

	iDictionarySize := int64(len(m.Dictionary))

	if err := validate.MaxItems("password_dictionary"+"."+"dictionary", "body", iDictionarySize, 200); err != nil {
		return err
	}

	return nil
}

func (m *PostConnectionsBodyOptionsPasswordDictionary) validateEnable(formats strfmt.Registry) error {

	if err := validate.Required("password_dictionary"+"."+"enable", "body", m.Enable); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostConnectionsBodyOptionsPasswordDictionary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostConnectionsBodyOptionsPasswordDictionary) UnmarshalBinary(b []byte) error {
	var res PostConnectionsBodyOptionsPasswordDictionary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PostConnectionsBodyOptionsPasswordHistory Options for password history policy
// swagger:model PostConnectionsBodyOptionsPasswordHistory
type PostConnectionsBodyOptionsPasswordHistory struct {

	// enable
	// Required: true
	Enable *bool `json:"enable"`

	// size
	// Maximum: 24
	// Minimum: 0
	Size *int64 `json:"size,omitempty"`
}

// Validate validates this post connections body options password history
func (m *PostConnectionsBodyOptionsPasswordHistory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostConnectionsBodyOptionsPasswordHistory) validateEnable(formats strfmt.Registry) error {

	if err := validate.Required("password_history"+"."+"enable", "body", m.Enable); err != nil {
		return err
	}

	return nil
}

func (m *PostConnectionsBodyOptionsPasswordHistory) validateSize(formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := validate.MinimumInt("password_history"+"."+"size", "body", int64(*m.Size), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("password_history"+"."+"size", "body", int64(*m.Size), 24, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostConnectionsBodyOptionsPasswordHistory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostConnectionsBodyOptionsPasswordHistory) UnmarshalBinary(b []byte) error {
	var res PostConnectionsBodyOptionsPasswordHistory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PostConnectionsBodyOptionsPasswordNoPersonalInfo Options for password expiration policy
// swagger:model PostConnectionsBodyOptionsPasswordNoPersonalInfo
type PostConnectionsBodyOptionsPasswordNoPersonalInfo struct {

	// enable
	// Required: true
	Enable *bool `json:"enable"`
}

// Validate validates this post connections body options password no personal info
func (m *PostConnectionsBodyOptionsPasswordNoPersonalInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostConnectionsBodyOptionsPasswordNoPersonalInfo) validateEnable(formats strfmt.Registry) error {

	if err := validate.Required("password_no_personal_info"+"."+"enable", "body", m.Enable); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostConnectionsBodyOptionsPasswordNoPersonalInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostConnectionsBodyOptionsPasswordNoPersonalInfo) UnmarshalBinary(b []byte) error {
	var res PostConnectionsBodyOptionsPasswordNoPersonalInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PostConnectionsBodyOptionsValidation Options for validation
// swagger:model PostConnectionsBodyOptionsValidation
type PostConnectionsBodyOptionsValidation struct {

	// username
	Username *PostConnectionsBodyOptionsValidationUsername `json:"username,omitempty"`
}

// Validate validates this post connections body options validation
func (m *PostConnectionsBodyOptionsValidation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostConnectionsBodyOptionsValidation) validateUsername(formats strfmt.Registry) error {

	if swag.IsZero(m.Username) { // not required
		return nil
	}

	if m.Username != nil {
		if err := m.Username.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validation" + "." + "username")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostConnectionsBodyOptionsValidation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostConnectionsBodyOptionsValidation) UnmarshalBinary(b []byte) error {
	var res PostConnectionsBodyOptionsValidation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PostConnectionsBodyOptionsValidationUsername post connections body options validation username
// swagger:model PostConnectionsBodyOptionsValidationUsername
type PostConnectionsBodyOptionsValidationUsername struct {

	// max
	// Required: true
	// Maximum: 128
	Max *int64 `json:"max"`

	// min
	// Required: true
	// Minimum: 1
	Min *int64 `json:"min"`
}

// Validate validates this post connections body options validation username
func (m *PostConnectionsBodyOptionsValidationUsername) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostConnectionsBodyOptionsValidationUsername) validateMax(formats strfmt.Registry) error {

	if err := validate.Required("validation"+"."+"username"+"."+"max", "body", m.Max); err != nil {
		return err
	}

	if err := validate.MaximumInt("validation"+"."+"username"+"."+"max", "body", int64(*m.Max), 128, false); err != nil {
		return err
	}

	return nil
}

func (m *PostConnectionsBodyOptionsValidationUsername) validateMin(formats strfmt.Registry) error {

	if err := validate.Required("validation"+"."+"username"+"."+"min", "body", m.Min); err != nil {
		return err
	}

	if err := validate.MinimumInt("validation"+"."+"username"+"."+"min", "body", int64(*m.Min), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostConnectionsBodyOptionsValidationUsername) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostConnectionsBodyOptionsValidationUsername) UnmarshalBinary(b []byte) error {
	var res PostConnectionsBodyOptionsValidationUsername
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
