// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostUsersExportsResponse post users exports response
// swagger:model post_users-exports_response
type PostUsersExportsResponse struct {

	// The connection id of the connection from which users will be exported
	ConnectionID *string `json:"connection_id,omitempty"`

	// The date when the job was created.
	CreatedAt string `json:"created_at,omitempty"`

	// A list of fields to be included in the CSV. If omitted, a set of predefined fields will be exported.
	// Max Items: 30
	Fields []*PostUsersExportsResponseFieldsItems0 `json:"fields"`

	// The format of the file. Valid values are: "json" and "csv".
	// Enum: [json csv]
	Format *string `json:"format,omitempty"`

	// The job's identifier. Useful to retrieve its status
	// Required: true
	ID *string `json:"id"`

	// Limit the number of records.
	// Minimum: 1
	Limit int64 `json:"limit,omitempty"`

	// The job's status
	// Required: true
	Status *string `json:"status"`

	// The type of job
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this post users exports response
func (m *PostUsersExportsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostUsersExportsResponse) validateFields(formats strfmt.Registry) error {

	if swag.IsZero(m.Fields) { // not required
		return nil
	}

	iFieldsSize := int64(len(m.Fields))

	if err := validate.MaxItems("fields", "body", iFieldsSize, 30); err != nil {
		return err
	}

	for i := 0; i < len(m.Fields); i++ {
		if swag.IsZero(m.Fields[i]) { // not required
			continue
		}

		if m.Fields[i] != nil {
			if err := m.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var postUsersExportsResponseTypeFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["json","csv"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postUsersExportsResponseTypeFormatPropEnum = append(postUsersExportsResponseTypeFormatPropEnum, v)
	}
}

const (

	// PostUsersExportsResponseFormatJSON captures enum value "json"
	PostUsersExportsResponseFormatJSON string = "json"

	// PostUsersExportsResponseFormatCsv captures enum value "csv"
	PostUsersExportsResponseFormatCsv string = "csv"
)

// prop value enum
func (m *PostUsersExportsResponse) validateFormatEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postUsersExportsResponseTypeFormatPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostUsersExportsResponse) validateFormat(formats strfmt.Registry) error {

	if swag.IsZero(m.Format) { // not required
		return nil
	}

	// value enum
	if err := m.validateFormatEnum("format", "body", *m.Format); err != nil {
		return err
	}

	return nil
}

func (m *PostUsersExportsResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PostUsersExportsResponse) validateLimit(formats strfmt.Registry) error {

	if swag.IsZero(m.Limit) { // not required
		return nil
	}

	if err := validate.MinimumInt("limit", "body", int64(m.Limit), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *PostUsersExportsResponse) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *PostUsersExportsResponse) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostUsersExportsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostUsersExportsResponse) UnmarshalBinary(b []byte) error {
	var res PostUsersExportsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PostUsersExportsResponseFieldsItems0 post users exports response fields items0
// swagger:model PostUsersExportsResponseFieldsItems0
type PostUsersExportsResponseFieldsItems0 struct {

	// The title of the column in the exported CSV.
	ExportAs string `json:"export_as,omitempty"`

	// The name of the field in the profile.
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this post users exports response fields items0
func (m *PostUsersExportsResponseFieldsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostUsersExportsResponseFieldsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostUsersExportsResponseFieldsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostUsersExportsResponseFieldsItems0) UnmarshalBinary(b []byte) error {
	var res PostUsersExportsResponseFieldsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
