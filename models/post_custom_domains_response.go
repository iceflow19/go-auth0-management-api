// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostCustomDomainsResponse post custom domains response
// swagger:model post_custom-domains_response
type PostCustomDomainsResponse struct {

	// The id of the custom domain.
	// Required: true
	CustomDomainID *string `json:"custom_domain_id"`

	// The custom domain.
	// Required: true
	Domain *string `json:"domain"`

	// <code>true</code> if the domain was marked as "primary", <code>false</code> otherwise.
	// Required: true
	Primary bool `json:"primary"`

	// The custom domain configuration status.
	// Required: true
	// Enum: [disabled pending pending_verification ready]
	Status *string `json:"status"`

	// The custom domain provisioning type.
	// Required: true
	// Enum: [auth0_managed_certs self_managed_certs]
	Type *string `json:"type"`

	// verification
	// Required: true
	Verification *PostCustomDomainsResponseVerification `json:"verification"`
}

// Validate validates this post custom domains response
func (m *PostCustomDomainsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomDomainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostCustomDomainsResponse) validateCustomDomainID(formats strfmt.Registry) error {

	if err := validate.Required("custom_domain_id", "body", m.CustomDomainID); err != nil {
		return err
	}

	return nil
}

func (m *PostCustomDomainsResponse) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *PostCustomDomainsResponse) validatePrimary(formats strfmt.Registry) error {

	if err := validate.Required("primary", "body", bool(m.Primary)); err != nil {
		return err
	}

	return nil
}

var postCustomDomainsResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["disabled","pending","pending_verification","ready"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postCustomDomainsResponseTypeStatusPropEnum = append(postCustomDomainsResponseTypeStatusPropEnum, v)
	}
}

const (

	// PostCustomDomainsResponseStatusDisabled captures enum value "disabled"
	PostCustomDomainsResponseStatusDisabled string = "disabled"

	// PostCustomDomainsResponseStatusPending captures enum value "pending"
	PostCustomDomainsResponseStatusPending string = "pending"

	// PostCustomDomainsResponseStatusPendingVerification captures enum value "pending_verification"
	PostCustomDomainsResponseStatusPendingVerification string = "pending_verification"

	// PostCustomDomainsResponseStatusReady captures enum value "ready"
	PostCustomDomainsResponseStatusReady string = "ready"
)

// prop value enum
func (m *PostCustomDomainsResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postCustomDomainsResponseTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostCustomDomainsResponse) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

var postCustomDomainsResponseTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["auth0_managed_certs","self_managed_certs"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postCustomDomainsResponseTypeTypePropEnum = append(postCustomDomainsResponseTypeTypePropEnum, v)
	}
}

const (

	// PostCustomDomainsResponseTypeAuth0ManagedCerts captures enum value "auth0_managed_certs"
	PostCustomDomainsResponseTypeAuth0ManagedCerts string = "auth0_managed_certs"

	// PostCustomDomainsResponseTypeSelfManagedCerts captures enum value "self_managed_certs"
	PostCustomDomainsResponseTypeSelfManagedCerts string = "self_managed_certs"
)

// prop value enum
func (m *PostCustomDomainsResponse) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postCustomDomainsResponseTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostCustomDomainsResponse) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *PostCustomDomainsResponse) validateVerification(formats strfmt.Registry) error {

	if err := validate.Required("verification", "body", m.Verification); err != nil {
		return err
	}

	if m.Verification != nil {
		if err := m.Verification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verification")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostCustomDomainsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostCustomDomainsResponse) UnmarshalBinary(b []byte) error {
	var res PostCustomDomainsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
