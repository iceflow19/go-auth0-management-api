// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchSettingsBody patch settings body
// swagger:model patch_settings_body
type PatchSettingsBody struct {

	// A set of URLs that are valid to redirect to after logout from Auth0
	// Unique: true
	AllowedLogoutUrls []string `json:"allowed_logout_urls"`

	// change password
	ChangePassword *PatchSettingsBodyChangePassword `json:"change_password,omitempty"`

	// Default audience for API Authorization
	DefaultAudience string `json:"default_audience,omitempty"`

	// Name of the connection that will be used for password grants at the token endpoint. Only the following connection types are supported: LDAP, AD, Database Connections, Passwordless, Windows Azure Active Directory, ADFS
	DefaultDirectory string `json:"default_directory,omitempty"`

	// error page
	ErrorPage *PatchSettingsBodyErrorPage `json:"error_page,omitempty"`

	// flags
	Flags *PatchSettingsBodyFlags `json:"flags,omitempty"`

	// The friendly name of the tenant
	FriendlyName *string `json:"friendly_name,omitempty"`

	// guardian mfa page
	GuardianMfaPage *PatchSettingsBodyGuardianMfaPage `json:"guardian_mfa_page,omitempty"`

	// Force a user to login after they have been inactive for the specified number (unit: hours)
	// Maximum: 720
	// Minimum: 1
	IDLESessionLifetime int64 `json:"idle_session_lifetime,omitempty"`

	// The URL of the tenant logo (recommended size: 150x150)
	PictureURL *string `json:"picture_url,omitempty"`

	// The selected sandbox version to be used for the extensibility environment
	SandboxVersion *string `json:"sandbox_version,omitempty"`

	// Login session lifetime, how long the session will stay valid (unit: hours)
	// Maximum: 720
	// Minimum: 1
	SessionLifetime int64 `json:"session_lifetime,omitempty"`

	// User support email
	SupportEmail *string `json:"support_email,omitempty"`

	// User support url
	SupportURL *string `json:"support_url,omitempty"`
}

// Validate validates this patch settings body
func (m *PatchSettingsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedLogoutUrls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChangePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorPage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuardianMfaPage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDLESessionLifetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionLifetime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchSettingsBody) validateAllowedLogoutUrls(formats strfmt.Registry) error {

	if swag.IsZero(m.AllowedLogoutUrls) { // not required
		return nil
	}

	if err := validate.UniqueItems("allowed_logout_urls", "body", m.AllowedLogoutUrls); err != nil {
		return err
	}

	return nil
}

func (m *PatchSettingsBody) validateChangePassword(formats strfmt.Registry) error {

	if swag.IsZero(m.ChangePassword) { // not required
		return nil
	}

	if m.ChangePassword != nil {
		if err := m.ChangePassword.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("change_password")
			}
			return err
		}
	}

	return nil
}

func (m *PatchSettingsBody) validateErrorPage(formats strfmt.Registry) error {

	if swag.IsZero(m.ErrorPage) { // not required
		return nil
	}

	if m.ErrorPage != nil {
		if err := m.ErrorPage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error_page")
			}
			return err
		}
	}

	return nil
}

func (m *PatchSettingsBody) validateFlags(formats strfmt.Registry) error {

	if swag.IsZero(m.Flags) { // not required
		return nil
	}

	if m.Flags != nil {
		if err := m.Flags.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flags")
			}
			return err
		}
	}

	return nil
}

func (m *PatchSettingsBody) validateGuardianMfaPage(formats strfmt.Registry) error {

	if swag.IsZero(m.GuardianMfaPage) { // not required
		return nil
	}

	if m.GuardianMfaPage != nil {
		if err := m.GuardianMfaPage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guardian_mfa_page")
			}
			return err
		}
	}

	return nil
}

func (m *PatchSettingsBody) validateIDLESessionLifetime(formats strfmt.Registry) error {

	if swag.IsZero(m.IDLESessionLifetime) { // not required
		return nil
	}

	if err := validate.MinimumInt("idle_session_lifetime", "body", int64(m.IDLESessionLifetime), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("idle_session_lifetime", "body", int64(m.IDLESessionLifetime), 720, false); err != nil {
		return err
	}

	return nil
}

func (m *PatchSettingsBody) validateSessionLifetime(formats strfmt.Registry) error {

	if swag.IsZero(m.SessionLifetime) { // not required
		return nil
	}

	if err := validate.MinimumInt("session_lifetime", "body", int64(m.SessionLifetime), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("session_lifetime", "body", int64(m.SessionLifetime), 720, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchSettingsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchSettingsBody) UnmarshalBinary(b []byte) error {
	var res PatchSettingsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
