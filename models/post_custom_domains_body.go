// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostCustomDomainsBody post custom domains body
// swagger:model post_custom-domains_body
type PostCustomDomainsBody struct {

	// Your custom domain.
	// Required: true
	Domain *string `json:"domain"`

	// The custom domain provisioning type.
	// Required: true
	// Enum: [auth0_managed_certs self_managed_certs]
	Type *string `json:"type"`

	// The custom domain verification method.
	// Enum: [txt]
	VerificationMethod *string `json:"verification_method,omitempty"`
}

// Validate validates this post custom domains body
func (m *PostCustomDomainsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerificationMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostCustomDomainsBody) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

var postCustomDomainsBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["auth0_managed_certs","self_managed_certs"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postCustomDomainsBodyTypeTypePropEnum = append(postCustomDomainsBodyTypeTypePropEnum, v)
	}
}

const (

	// PostCustomDomainsBodyTypeAuth0ManagedCerts captures enum value "auth0_managed_certs"
	PostCustomDomainsBodyTypeAuth0ManagedCerts string = "auth0_managed_certs"

	// PostCustomDomainsBodyTypeSelfManagedCerts captures enum value "self_managed_certs"
	PostCustomDomainsBodyTypeSelfManagedCerts string = "self_managed_certs"
)

// prop value enum
func (m *PostCustomDomainsBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postCustomDomainsBodyTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostCustomDomainsBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

var postCustomDomainsBodyTypeVerificationMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["txt"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postCustomDomainsBodyTypeVerificationMethodPropEnum = append(postCustomDomainsBodyTypeVerificationMethodPropEnum, v)
	}
}

const (

	// PostCustomDomainsBodyVerificationMethodTxt captures enum value "txt"
	PostCustomDomainsBodyVerificationMethodTxt string = "txt"
)

// prop value enum
func (m *PostCustomDomainsBody) validateVerificationMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postCustomDomainsBodyTypeVerificationMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostCustomDomainsBody) validateVerificationMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.VerificationMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateVerificationMethodEnum("verification_method", "body", *m.VerificationMethod); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostCustomDomainsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostCustomDomainsBody) UnmarshalBinary(b []byte) error {
	var res PostCustomDomainsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
