// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetEnrollmentsResponse get enrollments response
// swagger:model get_enrollments_response
type GetEnrollmentsResponse struct {

	// Enrollment type
	// Enum: [authenticator guardian sms]
	AuthMethod string `json:"auth_method,omitempty"`

	// Enrollment date
	// Format: date-time
	EnrolledAt strfmt.DateTime `json:"enrolled_at,omitempty"`

	// Enrollment generated id
	ID string `json:"id,omitempty"`

	// Device identifier (usually phone identifier)
	Identifier string `json:"identifier,omitempty"`

	// Last authentication
	// Format: date-time
	LastAuth strfmt.DateTime `json:"last_auth,omitempty"`

	// Enrollment name (usually phone number)
	Name string `json:"name,omitempty"`

	// Phone number
	PhoneNumber string `json:"phone_number,omitempty"`

	// Enrollment status
	// Enum: [pending confirmed]
	Status string `json:"status,omitempty"`

	// Enrollment type
	Type string `json:"type,omitempty"`
}

// Validate validates this get enrollments response
func (m *GetEnrollmentsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnrolledAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getEnrollmentsResponseTypeAuthMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["authenticator","guardian","sms"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getEnrollmentsResponseTypeAuthMethodPropEnum = append(getEnrollmentsResponseTypeAuthMethodPropEnum, v)
	}
}

const (

	// GetEnrollmentsResponseAuthMethodAuthenticator captures enum value "authenticator"
	GetEnrollmentsResponseAuthMethodAuthenticator string = "authenticator"

	// GetEnrollmentsResponseAuthMethodGuardian captures enum value "guardian"
	GetEnrollmentsResponseAuthMethodGuardian string = "guardian"

	// GetEnrollmentsResponseAuthMethodSms captures enum value "sms"
	GetEnrollmentsResponseAuthMethodSms string = "sms"
)

// prop value enum
func (m *GetEnrollmentsResponse) validateAuthMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getEnrollmentsResponseTypeAuthMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetEnrollmentsResponse) validateAuthMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthMethodEnum("auth_method", "body", m.AuthMethod); err != nil {
		return err
	}

	return nil
}

func (m *GetEnrollmentsResponse) validateEnrolledAt(formats strfmt.Registry) error {

	if swag.IsZero(m.EnrolledAt) { // not required
		return nil
	}

	if err := validate.FormatOf("enrolled_at", "body", "date-time", m.EnrolledAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetEnrollmentsResponse) validateLastAuth(formats strfmt.Registry) error {

	if swag.IsZero(m.LastAuth) { // not required
		return nil
	}

	if err := validate.FormatOf("last_auth", "body", "date-time", m.LastAuth.String(), formats); err != nil {
		return err
	}

	return nil
}

var getEnrollmentsResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending","confirmed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getEnrollmentsResponseTypeStatusPropEnum = append(getEnrollmentsResponseTypeStatusPropEnum, v)
	}
}

const (

	// GetEnrollmentsResponseStatusPending captures enum value "pending"
	GetEnrollmentsResponseStatusPending string = "pending"

	// GetEnrollmentsResponseStatusConfirmed captures enum value "confirmed"
	GetEnrollmentsResponseStatusConfirmed string = "confirmed"
)

// prop value enum
func (m *GetEnrollmentsResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getEnrollmentsResponseTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetEnrollmentsResponse) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetEnrollmentsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetEnrollmentsResponse) UnmarshalBinary(b []byte) error {
	var res GetEnrollmentsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
