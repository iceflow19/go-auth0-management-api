// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostDeviceCredentialsBody post device credentials body
// swagger:model post_device-credentials_body
type PostDeviceCredentialsBody struct {

	// The client_id of the client for which the credential will be created
	ClientID string `json:"client_id,omitempty"`

	// A unique identifier for the device. Recommendation: use <a href='http://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID'>this</a> for Android and <a href='https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDevice_Class/index.html#//apple_ref/occ/instp/UIDevice/identifierForVendor'>this</a> for iOS
	// Required: true
	DeviceID *string `json:"device_id"`

	// The device's name, a value that must be easily recognized by the device's owner
	// Required: true
	DeviceName *string `json:"device_name"`

	// The type of the credential
	// Required: true
	// Enum: [public_key]
	Type *string `json:"type"`

	// A base64 encoded string with the value of the credential
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this post device credentials body
func (m *PostDeviceCredentialsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostDeviceCredentialsBody) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("device_id", "body", m.DeviceID); err != nil {
		return err
	}

	return nil
}

func (m *PostDeviceCredentialsBody) validateDeviceName(formats strfmt.Registry) error {

	if err := validate.Required("device_name", "body", m.DeviceName); err != nil {
		return err
	}

	return nil
}

var postDeviceCredentialsBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["public_key"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postDeviceCredentialsBodyTypeTypePropEnum = append(postDeviceCredentialsBodyTypeTypePropEnum, v)
	}
}

const (

	// PostDeviceCredentialsBodyTypePublicKey captures enum value "public_key"
	PostDeviceCredentialsBodyTypePublicKey string = "public_key"
)

// prop value enum
func (m *PostDeviceCredentialsBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postDeviceCredentialsBodyTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostDeviceCredentialsBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *PostDeviceCredentialsBody) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostDeviceCredentialsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostDeviceCredentialsBody) UnmarshalBinary(b []byte) error {
	var res PostDeviceCredentialsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
