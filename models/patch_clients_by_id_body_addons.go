// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchClientsByIDBodyAddons The addons for the client
// swagger:model patch_clients_by_id_body_addons
type PatchClientsByIDBodyAddons struct {

	// aws
	Aws *PatchClientsByIDBodyAddonsAws `json:"aws,omitempty"`

	// azure blob
	AzureBlob *PatchClientsByIDBodyAddonsAzureBlob `json:"azure_blob,omitempty"`

	// azure sb
	AzureSb *PatchClientsByIDBodyAddonsAzureSb `json:"azure_sb,omitempty"`

	// box
	Box interface{} `json:"box,omitempty"`

	// cloudbees
	Cloudbees interface{} `json:"cloudbees,omitempty"`

	// concur
	Concur interface{} `json:"concur,omitempty"`

	// dropbox
	Dropbox interface{} `json:"dropbox,omitempty"`

	// echosign
	Echosign interface{} `json:"echosign,omitempty"`

	// egnyte
	Egnyte interface{} `json:"egnyte,omitempty"`

	// firebase
	Firebase *PatchClientsByIDBodyAddonsFirebase `json:"firebase,omitempty"`

	// layer
	Layer *PatchClientsByIDBodyAddonsLayer `json:"layer,omitempty"`

	// mscrm
	Mscrm *PatchClientsByIDBodyAddonsMscrm `json:"mscrm,omitempty"`

	// newrelic
	Newrelic interface{} `json:"newrelic,omitempty"`

	// office365
	Office365 interface{} `json:"office365,omitempty"`

	// rms
	Rms *PatchClientsByIDBodyAddonsRms `json:"rms,omitempty"`

	// salesforce
	Salesforce *PatchClientsByIDBodyAddonsSalesforce `json:"salesforce,omitempty"`

	// salesforce api
	SalesforceAPI *PatchClientsByIDBodyAddonsSalesforceAPI `json:"salesforce_api,omitempty"`

	// salesforce sandbox api
	SalesforceSandboxAPI *PatchClientsByIDBodyAddonsSalesforceSandboxAPI `json:"salesforce_sandbox_api,omitempty"`

	// samlp
	Samlp *PatchClientsByIDBodyAddonsSamlp `json:"samlp,omitempty"`

	// sap api
	SapAPI *PatchClientsByIDBodyAddonsSapAPI `json:"sap_api,omitempty"`

	// sentry
	Sentry interface{} `json:"sentry,omitempty"`

	// sharepoint
	Sharepoint interface{} `json:"sharepoint,omitempty"`

	// slack
	SLACK *PatchClientsByIDBodyAddonsSLACK `json:"slack,omitempty"`

	// springcm
	Springcm interface{} `json:"springcm,omitempty"`

	// wams
	Wams *PatchClientsByIDBodyAddonsWams `json:"wams,omitempty"`

	// wsfed
	Wsfed interface{} `json:"wsfed,omitempty"`

	// zendesk
	Zendesk interface{} `json:"zendesk,omitempty"`

	// zoom
	Zoom *PatchClientsByIDBodyAddonsZoom `json:"zoom,omitempty"`
}

// Validate validates this patch clients by id body addons
func (m *PatchClientsByIDBodyAddons) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAws(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureBlob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureSb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirebase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLayer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMscrm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalesforce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalesforceAPI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalesforceSandboxAPI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSamlp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSapAPI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSLACK(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZoom(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchClientsByIDBodyAddons) validateAws(formats strfmt.Registry) error {

	if swag.IsZero(m.Aws) { // not required
		return nil
	}

	if m.Aws != nil {
		if err := m.Aws.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws")
			}
			return err
		}
	}

	return nil
}

func (m *PatchClientsByIDBodyAddons) validateAzureBlob(formats strfmt.Registry) error {

	if swag.IsZero(m.AzureBlob) { // not required
		return nil
	}

	if m.AzureBlob != nil {
		if err := m.AzureBlob.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure_blob")
			}
			return err
		}
	}

	return nil
}

func (m *PatchClientsByIDBodyAddons) validateAzureSb(formats strfmt.Registry) error {

	if swag.IsZero(m.AzureSb) { // not required
		return nil
	}

	if m.AzureSb != nil {
		if err := m.AzureSb.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure_sb")
			}
			return err
		}
	}

	return nil
}

func (m *PatchClientsByIDBodyAddons) validateFirebase(formats strfmt.Registry) error {

	if swag.IsZero(m.Firebase) { // not required
		return nil
	}

	if m.Firebase != nil {
		if err := m.Firebase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firebase")
			}
			return err
		}
	}

	return nil
}

func (m *PatchClientsByIDBodyAddons) validateLayer(formats strfmt.Registry) error {

	if swag.IsZero(m.Layer) { // not required
		return nil
	}

	if m.Layer != nil {
		if err := m.Layer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("layer")
			}
			return err
		}
	}

	return nil
}

func (m *PatchClientsByIDBodyAddons) validateMscrm(formats strfmt.Registry) error {

	if swag.IsZero(m.Mscrm) { // not required
		return nil
	}

	if m.Mscrm != nil {
		if err := m.Mscrm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mscrm")
			}
			return err
		}
	}

	return nil
}

func (m *PatchClientsByIDBodyAddons) validateRms(formats strfmt.Registry) error {

	if swag.IsZero(m.Rms) { // not required
		return nil
	}

	if m.Rms != nil {
		if err := m.Rms.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rms")
			}
			return err
		}
	}

	return nil
}

func (m *PatchClientsByIDBodyAddons) validateSalesforce(formats strfmt.Registry) error {

	if swag.IsZero(m.Salesforce) { // not required
		return nil
	}

	if m.Salesforce != nil {
		if err := m.Salesforce.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("salesforce")
			}
			return err
		}
	}

	return nil
}

func (m *PatchClientsByIDBodyAddons) validateSalesforceAPI(formats strfmt.Registry) error {

	if swag.IsZero(m.SalesforceAPI) { // not required
		return nil
	}

	if m.SalesforceAPI != nil {
		if err := m.SalesforceAPI.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("salesforce_api")
			}
			return err
		}
	}

	return nil
}

func (m *PatchClientsByIDBodyAddons) validateSalesforceSandboxAPI(formats strfmt.Registry) error {

	if swag.IsZero(m.SalesforceSandboxAPI) { // not required
		return nil
	}

	if m.SalesforceSandboxAPI != nil {
		if err := m.SalesforceSandboxAPI.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("salesforce_sandbox_api")
			}
			return err
		}
	}

	return nil
}

func (m *PatchClientsByIDBodyAddons) validateSamlp(formats strfmt.Registry) error {

	if swag.IsZero(m.Samlp) { // not required
		return nil
	}

	if m.Samlp != nil {
		if err := m.Samlp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("samlp")
			}
			return err
		}
	}

	return nil
}

func (m *PatchClientsByIDBodyAddons) validateSapAPI(formats strfmt.Registry) error {

	if swag.IsZero(m.SapAPI) { // not required
		return nil
	}

	if m.SapAPI != nil {
		if err := m.SapAPI.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sap_api")
			}
			return err
		}
	}

	return nil
}

func (m *PatchClientsByIDBodyAddons) validateSLACK(formats strfmt.Registry) error {

	if swag.IsZero(m.SLACK) { // not required
		return nil
	}

	if m.SLACK != nil {
		if err := m.SLACK.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slack")
			}
			return err
		}
	}

	return nil
}

func (m *PatchClientsByIDBodyAddons) validateWams(formats strfmt.Registry) error {

	if swag.IsZero(m.Wams) { // not required
		return nil
	}

	if m.Wams != nil {
		if err := m.Wams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wams")
			}
			return err
		}
	}

	return nil
}

func (m *PatchClientsByIDBodyAddons) validateZoom(formats strfmt.Registry) error {

	if swag.IsZero(m.Zoom) { // not required
		return nil
	}

	if m.Zoom != nil {
		if err := m.Zoom.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zoom")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddons) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddons) UnmarshalBinary(b []byte) error {
	var res PatchClientsByIDBodyAddons
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchClientsByIDBodyAddonsAws patch clients by ID body addons aws
// swagger:model PatchClientsByIDBodyAddonsAws
type PatchClientsByIDBodyAddonsAws struct {

	// For example: 'arn:aws:iam::010616021751:saml-provider/idpname'
	Principal string `json:"principal,omitempty"`

	// For example: 'arn:aws:iam::010616021751:role/foo'
	Role string `json:"role,omitempty"`
}

// Validate validates this patch clients by ID body addons aws
func (m *PatchClientsByIDBodyAddonsAws) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsAws) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsAws) UnmarshalBinary(b []byte) error {
	var res PatchClientsByIDBodyAddonsAws
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchClientsByIDBodyAddonsAzureBlob patch clients by ID body addons azure blob
// swagger:model PatchClientsByIDBodyAddonsAzureBlob
type PatchClientsByIDBodyAddonsAzureBlob struct {

	// Your Azure storage account name. Just enter the first segment of the storage URL: http://<strong>YOUR ACCOUNT NAME</strong>.blob.core.windows.net
	AccountName string `json:"accountName,omitempty"`

	// The entity you want to request a token for: e.g. 'my-blob'. If left blank, the computed SAS will apply to the entire storage container
	BlobName string `json:"blobName,omitempty"`

	// Indicates that the issued token has permission to delete the blob
	BlobDelete bool `json:"blob_delete,omitempty"`

	// Indicates that the issued token has permission to read the content, properties, metadata and block list. Use the blob as the source of a copy operation
	BlobRead bool `json:"blob_read,omitempty"`

	// Indicates that the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account
	BlobWrite bool `json:"blob_write,omitempty"`

	// The container you want to request a token for: e.g. 'my-container'
	ContainerName string `json:"containerName,omitempty"`

	// Indicates that the issued token has permission to delete any blob in the container
	ContainerDelete bool `json:"container_delete,omitempty"`

	// Indicates that the issued token has permission to list blobs in the container
	ContainerList bool `json:"container_list,omitempty"`

	// Indicates that the issued token has permission to read the content, properties, metadata or block list of any blob in the container. Use any blob in the container as the source of a copy operation
	ContainerRead bool `json:"container_read,omitempty"`

	// Indicates that for any blob in the container the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account
	ContainerWrite bool `json:"container_write,omitempty"`

	// Expiration in minutes for the generated token. Default: 5 minutes
	// Minimum: 0
	Expiration *int64 `json:"expiration,omitempty"`

	// The shared access policy identifier defined in your storage account resource
	SignedIdentifier string `json:"signedIdentifier,omitempty"`

	// The storage account access key associated storage account
	StorageAccessKey string `json:"storageAccessKey,omitempty"`
}

// Validate validates this patch clients by ID body addons azure blob
func (m *PatchClientsByIDBodyAddonsAzureBlob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchClientsByIDBodyAddonsAzureBlob) validateExpiration(formats strfmt.Registry) error {

	if swag.IsZero(m.Expiration) { // not required
		return nil
	}

	if err := validate.MinimumInt("azure_blob"+"."+"expiration", "body", int64(*m.Expiration), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsAzureBlob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsAzureBlob) UnmarshalBinary(b []byte) error {
	var res PatchClientsByIDBodyAddonsAzureBlob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchClientsByIDBodyAddonsAzureSb patch clients by ID body addons azure sb
// swagger:model PatchClientsByIDBodyAddonsAzureSb
type PatchClientsByIDBodyAddonsAzureSb struct {

	// The entity you want to request a token for, for example: 'my-queue'
	EntityPath string `json:"entityPath,omitempty"`

	// Expiration in minutes for the generated token. Default: 5 minutes
	Expiration int64 `json:"expiration,omitempty"`

	// Your Azure Service Bus namespace. The first segment of the Service Bus URL: http://YOUR_NAMESPACE.servicebus.windows.net
	Namespace string `json:"namespace,omitempty"`

	// The Primary Key associated with the shared access policy
	SasKey string `json:"sasKey,omitempty"`

	// The shared access policy name defined in your Service Bus entity
	SasKeyName string `json:"sasKeyName,omitempty"`
}

// Validate validates this patch clients by ID body addons azure sb
func (m *PatchClientsByIDBodyAddonsAzureSb) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsAzureSb) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsAzureSb) UnmarshalBinary(b []byte) error {
	var res PatchClientsByIDBodyAddonsAzureSb
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchClientsByIDBodyAddonsFirebase patch clients by ID body addons firebase
// swagger:model PatchClientsByIDBodyAddonsFirebase
type PatchClientsByIDBodyAddonsFirebase struct {

	// The ID of the Service Account you have created (SDK 3+)
	ClientEmail string `json:"client_email,omitempty"`

	// Lifespan of the Token in seconds (SDK 3+)
	LifetimeInSeconds int64 `json:"lifetime_in_seconds,omitempty"`

	// The Private Key for signing the token. (SDK 3+)
	PrivateKey string `json:"private_key,omitempty"`

	// Optional. ID of the private key (SDK 3+)
	PrivateKeyID string `json:"private_key_id,omitempty"`

	// Firebase's secret
	Secret string `json:"secret,omitempty"`
}

// Validate validates this patch clients by ID body addons firebase
func (m *PatchClientsByIDBodyAddonsFirebase) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsFirebase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsFirebase) UnmarshalBinary(b []byte) error {
	var res PatchClientsByIDBodyAddonsFirebase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchClientsByIDBodyAddonsLayer patch clients by ID body addons layer
// swagger:model PatchClientsByIDBodyAddonsLayer
type PatchClientsByIDBodyAddonsLayer struct {

	// An optional expiration in minutes for the generated token. By default it will be 5 minutes
	// Minimum: 0
	Expiration *int64 `json:"expiration,omitempty"`

	// The Authentication Key identifier used to sign the Layer token
	// Required: true
	KeyID *string `json:"keyId"`

	// The name of the property used as the unique user id in Layer. If none is specified user_id will be used
	Principal string `json:"principal,omitempty"`

	// The private key for signing the Layer token
	// Required: true
	PrivateKey *string `json:"privateKey"`

	// The Provider ID of your Layer account
	// Required: true
	ProviderID *string `json:"providerId"`
}

// Validate validates this patch clients by ID body addons layer
func (m *PatchClientsByIDBodyAddonsLayer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviderID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchClientsByIDBodyAddonsLayer) validateExpiration(formats strfmt.Registry) error {

	if swag.IsZero(m.Expiration) { // not required
		return nil
	}

	if err := validate.MinimumInt("layer"+"."+"expiration", "body", int64(*m.Expiration), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PatchClientsByIDBodyAddonsLayer) validateKeyID(formats strfmt.Registry) error {

	if err := validate.Required("layer"+"."+"keyId", "body", m.KeyID); err != nil {
		return err
	}

	return nil
}

func (m *PatchClientsByIDBodyAddonsLayer) validatePrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("layer"+"."+"privateKey", "body", m.PrivateKey); err != nil {
		return err
	}

	return nil
}

func (m *PatchClientsByIDBodyAddonsLayer) validateProviderID(formats strfmt.Registry) error {

	if err := validate.Required("layer"+"."+"providerId", "body", m.ProviderID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsLayer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsLayer) UnmarshalBinary(b []byte) error {
	var res PatchClientsByIDBodyAddonsLayer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchClientsByIDBodyAddonsMscrm patch clients by ID body addons mscrm
// swagger:model PatchClientsByIDBodyAddonsMscrm
type PatchClientsByIDBodyAddonsMscrm struct {

	// Microsoft Dynamics CRM application URL.
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this patch clients by ID body addons mscrm
func (m *PatchClientsByIDBodyAddonsMscrm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchClientsByIDBodyAddonsMscrm) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("mscrm"+"."+"url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsMscrm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsMscrm) UnmarshalBinary(b []byte) error {
	var res PatchClientsByIDBodyAddonsMscrm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchClientsByIDBodyAddonsRms patch clients by ID body addons rms
// swagger:model PatchClientsByIDBodyAddonsRms
type PatchClientsByIDBodyAddonsRms struct {

	// This is the URL of your Rights Management Server. It can be internal or external, but users will have to be able to reach it.
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this patch clients by ID body addons rms
func (m *PatchClientsByIDBodyAddonsRms) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchClientsByIDBodyAddonsRms) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("rms"+"."+"url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsRms) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsRms) UnmarshalBinary(b []byte) error {
	var res PatchClientsByIDBodyAddonsRms
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchClientsByIDBodyAddonsSLACK patch clients by ID body addons SLA c k
// swagger:model PatchClientsByIDBodyAddonsSLACK
type PatchClientsByIDBodyAddonsSLACK struct {

	// Slack team name.
	// Required: true
	Team *string `json:"team"`
}

// Validate validates this patch clients by ID body addons SLA c k
func (m *PatchClientsByIDBodyAddonsSLACK) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTeam(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchClientsByIDBodyAddonsSLACK) validateTeam(formats strfmt.Registry) error {

	if err := validate.Required("slack"+"."+"team", "body", m.Team); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsSLACK) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsSLACK) UnmarshalBinary(b []byte) error {
	var res PatchClientsByIDBodyAddonsSLACK
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchClientsByIDBodyAddonsSalesforce patch clients by ID body addons salesforce
// swagger:model PatchClientsByIDBodyAddonsSalesforce
type PatchClientsByIDBodyAddonsSalesforce struct {

	// The arbitrary logical URL that identifies the Saleforce resource. The format has to be 'https://whatever.com'
	EntityID string `json:"entity_id,omitempty"`
}

// Validate validates this patch clients by ID body addons salesforce
func (m *PatchClientsByIDBodyAddonsSalesforce) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsSalesforce) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsSalesforce) UnmarshalBinary(b []byte) error {
	var res PatchClientsByIDBodyAddonsSalesforce
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchClientsByIDBodyAddonsSalesforceAPI patch clients by ID body addons salesforce API
// swagger:model PatchClientsByIDBodyAddonsSalesforceAPI
type PatchClientsByIDBodyAddonsSalesforceAPI struct {

	// The Consumer Key assigned by Salesforce to the Connected App
	Clientid string `json:"clientid,omitempty"`

	// The community name
	CommunityName string `json:"communityName,omitempty"`

	// The community url section
	CommunityURLSection string `json:"community_url_section,omitempty"`

	// The name of the property in the user object that maps to a Salesforce username, for example: 'email'
	Principal string `json:"principal,omitempty"`
}

// Validate validates this patch clients by ID body addons salesforce API
func (m *PatchClientsByIDBodyAddonsSalesforceAPI) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsSalesforceAPI) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsSalesforceAPI) UnmarshalBinary(b []byte) error {
	var res PatchClientsByIDBodyAddonsSalesforceAPI
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchClientsByIDBodyAddonsSalesforceSandboxAPI patch clients by ID body addons salesforce sandbox API
// swagger:model PatchClientsByIDBodyAddonsSalesforceSandboxAPI
type PatchClientsByIDBodyAddonsSalesforceSandboxAPI struct {

	// The Consumer Key assigned by Salesforce to the Connected App
	Clientid string `json:"clientid,omitempty"`

	// The community name
	CommunityName string `json:"communityName,omitempty"`

	// The community url section
	CommunityURLSection string `json:"community_url_section,omitempty"`

	// The name of the property in the user object that maps to a Salesforce username, for example: 'email'
	Principal string `json:"principal,omitempty"`
}

// Validate validates this patch clients by ID body addons salesforce sandbox API
func (m *PatchClientsByIDBodyAddonsSalesforceSandboxAPI) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsSalesforceSandboxAPI) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsSalesforceSandboxAPI) UnmarshalBinary(b []byte) error {
	var res PatchClientsByIDBodyAddonsSalesforceSandboxAPI
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchClientsByIDBodyAddonsSamlp patch clients by ID body addons samlp
// swagger:model PatchClientsByIDBodyAddonsSamlp
type PatchClientsByIDBodyAddonsSamlp struct {

	// audience
	Audience string `json:"audience,omitempty"`

	// authn context class ref
	AuthnContextClassRef string `json:"authnContextClassRef,omitempty"`

	// create upn claim
	CreateUpnClaim bool `json:"createUpnClaim,omitempty"`

	// destination
	Destination string `json:"destination,omitempty"`

	// digest algorithm
	DigestAlgorithm string `json:"digestAlgorithm,omitempty"`

	// issuer
	Issuer string `json:"issuer,omitempty"`

	// lifetime in seconds
	LifetimeInSeconds int64 `json:"lifetimeInSeconds,omitempty"`

	// map identities
	MapIdentities bool `json:"mapIdentities,omitempty"`

	// map unknown claims as is
	MapUnknownClaimsAsIs bool `json:"mapUnknownClaimsAsIs,omitempty"`

	// mappings
	Mappings interface{} `json:"mappings,omitempty"`

	// name identifier format
	NameIdentifierFormat string `json:"nameIdentifierFormat,omitempty"`

	// name identifier probes
	// Unique: true
	NameIdentifierProbes []string `json:"nameIdentifierProbes"`

	// passthrough claims with no mapping
	PassthroughClaimsWithNoMapping bool `json:"passthroughClaimsWithNoMapping,omitempty"`

	// recipient
	Recipient string `json:"recipient,omitempty"`

	// sign response
	SignResponse bool `json:"signResponse,omitempty"`

	// signature algorithm
	SignatureAlgorithm string `json:"signatureAlgorithm,omitempty"`
}

// Validate validates this patch clients by ID body addons samlp
func (m *PatchClientsByIDBodyAddonsSamlp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNameIdentifierProbes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchClientsByIDBodyAddonsSamlp) validateNameIdentifierProbes(formats strfmt.Registry) error {

	if swag.IsZero(m.NameIdentifierProbes) { // not required
		return nil
	}

	if err := validate.UniqueItems("samlp"+"."+"nameIdentifierProbes", "body", m.NameIdentifierProbes); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsSamlp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsSamlp) UnmarshalBinary(b []byte) error {
	var res PatchClientsByIDBodyAddonsSamlp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchClientsByIDBodyAddonsSapAPI patch clients by ID body addons sap API
// swagger:model PatchClientsByIDBodyAddonsSapAPI
type PatchClientsByIDBodyAddonsSapAPI struct {

	// Your SAP client ID
	Clientid string `json:"clientid,omitempty"`

	// The NameID element of the Subject can be used to express the user's identity
	NameIdentifierFormat string `json:"nameIdentifierFormat,omitempty"`

	// The requested scope for SAP APIs
	Scope string `json:"scope,omitempty"`

	// API calls to the token endpoint are authenticated with this password. Usually from a service account
	ServicePassword string `json:"servicePassword,omitempty"`

	// Your SAP OData server OAuth2 Token Endpoint URL
	TokenEndpointURL string `json:"tokenEndpointUrl,omitempty"`

	// The name of the property in the user object that maps to a SAP username, for example: 'email'
	UsernameAttribute string `json:"usernameAttribute,omitempty"`
}

// Validate validates this patch clients by ID body addons sap API
func (m *PatchClientsByIDBodyAddonsSapAPI) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsSapAPI) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsSapAPI) UnmarshalBinary(b []byte) error {
	var res PatchClientsByIDBodyAddonsSapAPI
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchClientsByIDBodyAddonsWams patch clients by ID body addons wams
// swagger:model PatchClientsByIDBodyAddonsWams
type PatchClientsByIDBodyAddonsWams struct {

	// The Windows Azure Mobile Services's master key
	Masterkey string `json:"masterkey,omitempty"`
}

// Validate validates this patch clients by ID body addons wams
func (m *PatchClientsByIDBodyAddonsWams) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsWams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsWams) UnmarshalBinary(b []byte) error {
	var res PatchClientsByIDBodyAddonsWams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchClientsByIDBodyAddonsZoom patch clients by ID body addons zoom
// swagger:model PatchClientsByIDBodyAddonsZoom
type PatchClientsByIDBodyAddonsZoom struct {

	// The first segment of your Vanity URL, for example: 'https://{account}.zoom.us'
	Account string `json:"account,omitempty"`
}

// Validate validates this patch clients by ID body addons zoom
func (m *PatchClientsByIDBodyAddonsZoom) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsZoom) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchClientsByIDBodyAddonsZoom) UnmarshalBinary(b []byte) error {
	var res PatchClientsByIDBodyAddonsZoom
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
