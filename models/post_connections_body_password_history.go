// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostConnectionsBodyPasswordHistory Options for password history policy
// swagger:model post_connections_body_password_history
type PostConnectionsBodyPasswordHistory struct {

	// enable
	// Required: true
	Enable *bool `json:"enable"`

	// size
	// Maximum: 24
	// Minimum: 0
	Size *int64 `json:"size,omitempty"`
}

// Validate validates this post connections body password history
func (m *PostConnectionsBodyPasswordHistory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostConnectionsBodyPasswordHistory) validateEnable(formats strfmt.Registry) error {

	if err := validate.Required("enable", "body", m.Enable); err != nil {
		return err
	}

	return nil
}

func (m *PostConnectionsBodyPasswordHistory) validateSize(formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := validate.MinimumInt("size", "body", int64(*m.Size), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("size", "body", int64(*m.Size), 24, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostConnectionsBodyPasswordHistory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostConnectionsBodyPasswordHistory) UnmarshalBinary(b []byte) error {
	var res PostConnectionsBodyPasswordHistory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
