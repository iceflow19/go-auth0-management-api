// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchConnectionsByIDBody patch connections by id body
// swagger:model patch_connections_by_id_body
type PatchConnectionsByIDBody struct {

	// The identifiers of the clients for which the connection is to be enabled. If the array is empty or the property is not specified, no clients are enabled
	EnabledClients []*string `json:"enabled_clients"`

	// metadata
	Metadata PatchConnectionsByIDBodyMetadata `json:"metadata,omitempty"`

	// options
	Options *PatchConnectionsByIDBodyOptions `json:"options,omitempty"`

	// Defines the realms for which the connection will be used (ie: email domains). If the array is empty or the property is not specified, the connection name will be added as realm
	// Max Items: 10
	Realms []string `json:"realms"`
}

// Validate validates this patch connections by id body
func (m *PatchConnectionsByIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRealms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchConnectionsByIDBody) validateOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Options) { // not required
		return nil
	}

	if m.Options != nil {
		if err := m.Options.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("options")
			}
			return err
		}
	}

	return nil
}

func (m *PatchConnectionsByIDBody) validateRealms(formats strfmt.Registry) error {

	if swag.IsZero(m.Realms) { // not required
		return nil
	}

	iRealmsSize := int64(len(m.Realms))

	if err := validate.MaxItems("realms", "body", iRealmsSize, 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchConnectionsByIDBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchConnectionsByIDBody) UnmarshalBinary(b []byte) error {
	var res PatchConnectionsByIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
